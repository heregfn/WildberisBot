admin = ""  # –£–∫–∞–∑–∞—Ç—å –≥—Ä—É–ø–ø—É –≤ —Ç–≥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
admin1 = ""  # –£–∫–∞–∑–∞—Ç—å id –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
admin_name = ""  # –£–∫–∞–∑–∞—Ç—å –∏–º—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
QIWI_PRIV_KEY = ""  # –£–∫–∞–∑–∞—Ç—å api key https://qiwi.com/p2p-admin/api
token = ""  # –£–∫–∞–∑–∞—Ç—å —Ç–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –æ—Ç https://t.me/BotFather

import time

import aiogram.dispatcher.middlewares

try:
    import asyncio
    import json
    import random
    import aiohttp
    import aiofiles
    from aiogram import Bot, Dispatcher, executor, types
    from aiogram.dispatcher import FSMContext
    import datetime
    import aioschedule
    import aiosqlite
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ParseMode, ReplyKeyboardMarkup, KeyboardButton
    from aiogram.dispatcher.filters.state import State, StatesGroup
    from aiogram.contrib.fsm_storage.memory import MemoryStorage
    from aiogram.contrib.middlewares.logging import LoggingMiddleware
    from aiogram.utils.markdown import escape_md
    from aiogram.dispatcher.filters import Text
    from pyqiwip2p import AioQiwiP2P
    from aiogram.utils.exceptions import Throttled
except ImportError as e:
    import os

    os.system('pip3 install asyncio aiohttp aiogram aioschedule aiosqlite pyqiwip2p')
    import asyncio
    import datetime
    import json
    import random
    import aiohttp
    import aiofiles
    from aiogram import Bot, Dispatcher, executor, types
    from aiogram.dispatcher import FSMContext
    import aioschedule
    import aiosqlite
    from pyqiwip2p import AioQiwiP2P
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ParseMode, ReplyKeyboardMarkup, KeyboardButton
    from aiogram.dispatcher.filters.state import State, StatesGroup
    from aiogram.contrib.fsm_storage.memory import MemoryStorage
    from aiogram.utils.markdown import escape_md
    from aiogram.contrib.middlewares.logging import LoggingMiddleware
    from aiogram.dispatcher.filters import Text
    from aiogram.utils.exceptions import Throttled

bot = Bot(token=token)
dp = Dispatcher(bot, storage=MemoryStorage())
dp.middleware.setup(LoggingMiddleware())

p2p = AioQiwiP2P(auth_key=QIWI_PRIV_KEY)


class states(StatesGroup):
    set_api = State()
    pay = State()
    edit_sale = State()
    sale_accept = State()
    setup_get = State()
    setup_accept = State()


# ------------------------------QIWI------------------------------
async def get_money(user_id):
    db = await aiosqlite.connect("BalanceUser.db")
    cursor = await db.cursor()
    try:
        await cursor.execute('SELECT user_id, balance FROM user_balance WHERE user_id = ?', (user_id,))
        id_teachers = await cursor.fetchone()
        money = id_teachers[1]
        await cursor.close()
        await db.close()
        return int(money)
    except Exception as e:
        await cursor.execute('INSERT INTO user_balance (user_id, balance) VALUES (?, ?)', (user_id, '0'))
        await db.commit()
        print(e, "get_money")
        return int(0)


async def set_money(user_id, money):
    try:
        user_id = int(user_id)
        money = int(money)
        db = await aiosqlite.connect(r"BalanceUser.db")
        cursor = await db.cursor()
        await cursor.execute(
            'INSERT INTO user_balance (user_id, balance) VALUES (?, ?)',
            (user_id, int(money)))
        await db.commit()
        return True
    except Exception as e:
        print(e, "set_money")
        return False


@dp.message_handler(Text(equals="–ë–∞–ª–∞–Ω—Å"), state="*")
@dp.message_handler(Text(equals="/balance"), state="*")
async def balance(message: types.Message):
    topup = InlineKeyboardButton("–°–≤–æ—è —Å—É–º–º–∞", callback_data="topup")
    up99 = InlineKeyboardButton("+99‚ÇΩ", callback_data="up99")
    deposits1 = InlineKeyboardButton("–ü–æ–ø–æ–ª–Ω–µ–Ω–∏—è", callback_data="deposits")
    writeoffs = InlineKeyboardButton("–°–ø–∏—Å–∞–Ω–∏—è", callback_data="write-offs")
    back1 = InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back")
    pay = InlineKeyboardMarkup(row_width=2).add(up99, topup, deposits1, writeoffs, back1)
    user_id = message.from_user.id
    text = message.text
    try:
        async with aiosqlite.connect(r"BalanceUser.db") as db:
            async with db.cursor() as cursor:
                await cursor.execute('SELECT user_id, balance FROM user_balance WHERE user_id = ?', (user_id,))
                user_info = await cursor.fetchone()
                if user_info is None:
                    balance1 = 0
                    await cursor.execute('INSERT INTO user_balance (user_id, balance) VALUES (?, ?)',
                                         (user_id, balance1))
                    await db.commit()
                    await message.answer(
                        f"üí∞ *–ë–∞–ª–∞–Ω—Å: {balance1}‚ÇΩ*\ \n\n¬∑ –¢–∞—Ä–∏—Ñ: *99‚ÇΩ / –º–µ—Å—è—Ü*\ \n\nüîí –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–æ –í–∞—à–µ–º—É —Å–æ–≥–ª–∞—Å–∏—é\.\n\nüõ° –î–µ–Ω—å–≥–∏ —Å –≤–∞—à–∏—Ö –∫–∞—Ä—Ç –≤ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º —Ä–µ–∂–∏–º–µ *–Ω–µ —Å–ø–∏—Å—ã–≤–∞—é—Ç—Å—è\.*\ ",
                        reply_markup=pay, parse_mode=types.ParseMode.MARKDOWN_V2)
                else:
                    balance1 = user_info[1]
                    await message.answer(
                        f"üí∞ *–ë–∞–ª–∞–Ω—Å: {balance1}‚ÇΩ*\ \n\n¬∑ –¢–∞—Ä–∏—Ñ: *99‚ÇΩ / –º–µ—Å—è—Ü*\ \n\nüîí –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–æ –í–∞—à–µ–º—É —Å–æ–≥–ª–∞—Å–∏—é\. \n\nüõ° –î–µ–Ω—å–≥–∏ —Å –≤–∞—à–∏—Ö –∫–∞—Ä—Ç –≤ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º —Ä–µ–∂–∏–º–µ *–Ω–µ —Å–ø–∏—Å—ã–≤–∞—é—Ç—Å—è\.*\ ",
                        reply_markup=pay, parse_mode=types.ParseMode.MARKDOWN_V2)
    except Exception as e:
        print(e, "balance")
    await DB_user(user_id, text)


@dp.callback_query_handler(Text(startswith="back1"), state="*")
@dp.callback_query_handler(Text(startswith="balance"), state="*")
async def balance(msg: types.CallbackQuery, state: FSMContext):
    await state.finish()
    topup = InlineKeyboardButton("–°–≤–æ—è —Å—É–º–º–∞", callback_data="topup")
    up99 = InlineKeyboardButton("+99‚ÇΩ", callback_data="up99")
    deposits = InlineKeyboardButton("–ü–æ–ø–æ–ª–Ω–µ–Ω–∏—è", callback_data="deposits")
    writeoffs = InlineKeyboardButton("–°–ø–∏—Å–∞–Ω–∏—è", callback_data="write-offs")
    back = InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back")
    pay = InlineKeyboardMarkup(row_width=2).add(up99, topup, deposits, writeoffs, back)
    user_id = msg.from_user.id
    text = '/balance'
    try:
        async with aiosqlite.connect(r"BalanceUser.db") as db:
            async with db.cursor() as cursor:
                await cursor.execute('SELECT user_id, balance FROM user_balance WHERE user_id = ?', (user_id,))
                user_info = await cursor.fetchone()
                if user_info is None:
                    balance = 0
                    await cursor.execute('INSERT INTO user_balance (user_id, balance) VALUES (?, ?)',
                                         (user_id, balance))
                    await db.commit()
                    await cursor.execute('INSERT INTO user_info (user_id, deposits, offs) VALUES (?, ?, ?)',
                                         (user_id, '', ''))
                    await db.commit()
                    await msg.message.edit_text(
                        f"üí∞ *–ë–∞–ª–∞–Ω—Å: {balance}‚ÇΩ*\ \n\n¬∑ –¢–∞—Ä–∏—Ñ: *99‚ÇΩ / –º–µ—Å—è—Ü*\ \n\nüîí –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–æ –í–∞—à–µ–º—É —Å–æ–≥–ª–∞—Å–∏—é\. \n\nüõ° –î–µ–Ω—å–≥–∏ —Å –≤–∞—à–∏—Ö –∫–∞—Ä—Ç –≤ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º —Ä–µ–∂–∏–º–µ *–Ω–µ —Å–ø–∏—Å—ã–≤–∞—é—Ç—Å—è\.*\ ",
                        reply_markup=pay, parse_mode=types.ParseMode.MARKDOWN_V2)
                else:
                    balance = user_info[1]
                    await msg.message.edit_text(
                        f"üí∞ *–ë–∞–ª–∞–Ω—Å: {balance}‚ÇΩ*\ \n\n¬∑ –¢–∞—Ä–∏—Ñ: *99‚ÇΩ / –º–µ—Å—è—Ü*\ \n\nüîí –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–æ –í–∞—à–µ–º—É —Å–æ–≥–ª–∞—Å–∏—é\. \n\nüõ° –î–µ–Ω—å–≥–∏ —Å –≤–∞—à–∏—Ö –∫–∞—Ä—Ç –≤ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º —Ä–µ–∂–∏–º–µ *–Ω–µ —Å–ø–∏—Å—ã–≤–∞—é—Ç—Å—è\.*\ ",
                        reply_markup=pay, parse_mode=types.ParseMode.MARKDOWN_V2)

        await msg.answer("")
    except Exception as e:
        print(e, "balance")
    await DB_user(user_id, text)


@dp.callback_query_handler(Text(startswith="Check_"), state="*")
async def Check(msg: types.CallbackQuery):
    user_id = msg.from_user.id
    text = msg.data
    text = text.split("_")[1]
    bill = await p2p.check(bill_id=text)
    bill_id = bill.bill_id
    await msg.answer()
    if bill.status == "PAID":
        db = await aiosqlite.connect("BalanceUser.db")
        cursor = await db.cursor()
        try:
            money = await get_money(user_id)
            async with aiosqlite.connect(r"BalanceUser.db") as db:
                async with db.cursor() as cursor:
                    await cursor.execute('SELECT * FROM user_bill WHERE bill_id = ?', (bill_id,))
                    user_info = await cursor.fetchone()
                    if user_info[0] == user_id:
                        if user_info[3] == 0:
                            money1 = user_info[2]
                            money2 = money + int(user_info[2])
                            await set_money(user_id, money2)
                            use = 1
                            await cursor.execute(
                                'INSERT INTO user_bill (user_id, bill_id, money, use) VALUES (?, ?, ?, ?)',
                                (user_id, bill_id, money1, use))
                            await db.commit()
                            await msg.message.answer(f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {money1}‚ÇΩ")
                            await cursor.execute('SELECT * FROM user_info WHERE user_id = ?', (user_id,))
                            info = await cursor.fetchone()
                            deposits = info[1]
                            deposits = deposits.split()
                            nows = datetime.datetime.now().strftime("%H:%M %d-%m-%Y")
                            deposits.append(f"{nows} - {money1}‚ÇΩ \n")
                            await cursor.execute(
                                'INSERT INTO user_info (user_id, deposits, offs, sub, sub_date) VALUES (?, ?, ?, ?, ?)',
                                (user_id, ",".join(deposits), info[2], info[3], info[4]))
                            await db.commit()
                            await bot.send_message(admin, text=f'–û–ø–ª–∞—Ç–∞ {user_id} –Ω–∞ {money1}—Ä. –í—Å–µ–≥–æ {money2}')
                        else:
                            await msg.message.edit_text(f"{msg.message.text}\n–°—á–µ—Ç —É—Å–ø–µ—à–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω.",
                                                        reply_markup=None)
                            await msg.message.answer(f"–≠—Ç–æ—Ç —Å—á–µ—Ç —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω.")
                    else:
                        await msg.message.answer("–¢—ã –∫–∞–∫ —Å—é–¥–∞ –ø–æ–ø–∞–ª? 0_o")
                        await bot.send_message(admin, text=f'–û–ø–ª–∞—Ç–∞ –Ω–µ –ø–æ —Ç–æ–º—É user_id {user_id} {user_info[0]}')
        except Exception as e:
            await bot.send_message(admin, text=f'–ü—Ä–∏ –æ–ø–ª–∞—Ç–µ –æ—à–∏–±–∫–∞ {e} —É {user_id}')
            await msg.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–µ—Ä–µ–¥–∞–ª –µ—ë –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É, –æ–∂–∏–¥–∞–π...")
    else:
        bill_id = InlineKeyboardButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"Check_{bill.bill_id}")
        url = InlineKeyboardButton("–û–ø–ª–∞—Ç–∏—Ç—å", url=bill.pay_url)
        cansel = InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data=f"Checkoof_{bill.bill_id}")
        topup = InlineKeyboardMarkup(row_width=2).add(url, bill_id).add(cansel)
        await msg.message.edit_text(f"C—á–µ—Ç –Ω–µ –æ–ø–ª–∞—á–µ–Ω, –æ–ø–ª–∞—Ç–∏—Ç–µ —Å—á–µ—Ç.", reply_markup=topup)


@dp.callback_query_handler(Text(startswith="Checkoof_"), state="*")
async def Checkoff(msg: types.CallbackQuery):
    await msg.answer()
    user_id = msg.from_user.id
    text = msg.data
    text = text.split("_")[1]
    bill = await p2p.check(bill_id=text)
    bill_id = bill.bill_id
    async with aiosqlite.connect("BalanceUser.db") as db:
        async with db.cursor() as cursor:
            if bill.status == "PAID":
                await msg.message.answer(
                    '–°—á–µ—Ç –±—ã–ª –æ–ø–ª–∞—á–µ–Ω, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –∞–∫—Ç–∏–≤–∏—Ä—É–π –µ–≥–æ, –µ—Å–ª–∏ —Ç—ã –µ–≥–æ —Ä–∞–Ω–µ–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –Ω–∞–∂–º–∏ "–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã"')
            else:
                await cursor.execute('SELECT * FROM user_bill WHERE bill_id = ?', (bill_id,))
                Id_user = await cursor.fetchone()
                if Id_user != None:
                    await cursor.execute('DELETE FROM user_bill WHERE bill_id = ?', (bill.bill_id,))
                    await db.commit()
                    await p2p.reject(bill_id=bill_id)
                    await bot.send_message(admin,
                                           text=f'–°—á–µ—Ç –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω –∫–ª–∏–µ–Ω—Ç–æ–º {user_id}\n–ö–æ–º–µ–Ω—Ç {bill.comment}\nBill_id {bill.bill_id}')
                    await msg.message.delete()
                    back = InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back")
                    pay = InlineKeyboardMarkup(row_width=2).add(back)
                    await msg.message.answer("–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=pay)
                else:
                    await msg.message.delete()
                    pass


@dp.callback_query_handler(Text(startswith="topup"), state="*")
async def Checkoff(msg: types.CallbackQuery):
    await msg.answer("")
    await msg.message.delete()
    back = InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back1")
    pay = InlineKeyboardMarkup(row_width=2).add(back)
    await msg.message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:", reply_markup=pay)
    await states.pay.set()


@dp.message_handler(state=states.pay)
async def topups1(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    text = message.text
    try:
        amount = int(text)
        pass
    except:
        await message.answer(
            "–í–≤–µ–¥–µ–Ω–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞. \n–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è - 10‚ÇΩ.")
        return
    if int(text) <= 1:
        await message.answer("–í–≤–µ–¥–∏ —Å—É–º–º—É –æ—Ç 10—Ä –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞")
    else:
        comment = f'{user_id}_{random.randrange(10000000, 9999999999)}'
        bill = await p2p.bill(amount=amount, lifetime=15, comment=comment)
        bill_id = InlineKeyboardButton("üí≤ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"Check_{bill.bill_id}")
        url = InlineKeyboardButton("üí≥ –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ", url=bill.pay_url)
        cansel = InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data=f"Checkoof_{bill.bill_id}")
        topup = InlineKeyboardMarkup(row_width=2).add(url, bill_id).add(cansel)
        await message.answer(
            f'üí∞ –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: *{amount}‚ÇΩ*\ \n\nüîí –û–ø–ª–∞—Ç–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –±–µ–∑–æ–ø–∞—Å–Ω–∞ –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ –ø–ª–∞—Ç—ë–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã\.\n\nüá∑üá∫ –û–ø–ª–∞—Ç–∏—Ç—å –º–æ–∂–Ω–æ –∫–∞—Ä—Ç–æ–π –ª—é–±–æ–≥–æ —Ä–æ—Å—Å–∏–π—Å–∫–æ–≥–æ –±–∞–Ω–∫–∞ \(–°–±–µ—Ä, –¢–∏–Ω—å–∫–æ—Ñ—Ñ, –ö–∏–≤–∏ –∏ —Ç\.–¥\.\)\.\n\nüïî –°—Ä–µ–¥—Å—Ç–≤–∞ –Ω–∞ –±–∞–ª–∞–Ω—Å –±–æ—Ç–∞ –ø–æ—Å—Ç—É–ø–∞—é—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 1\-2 –º–∏–Ω\.\n\nü§ñ –ß—Ç–æ–±—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞ –æ–ø–ª–∞—Ç–∏—Ç–µ –∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É¬ª',
            reply_markup=topup, parse_mode=types.ParseMode.MARKDOWN_V2)
        await bot.send_message(admin,
                               text=f'–¢—É—Ç —á–µ–ª {user_id} —Ö–æ—á–µ—Ç –æ–ø–ª–∞—Ç–∏—Ç—å —Å—á–µ—Ç –Ω–∞ {amount}—Ä, –≤–æ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É {bill.pay_url}, –ö–æ–º–µ–Ω—Ç {comment}\nBill_id {bill.bill_id}')
        async with aiosqlite.connect(r"BalanceUser.db") as db:
            async with db.cursor() as cursor:
                use = 0
                billamount = bill.amount
                billamount = str(billamount).split('.')[0]
                await cursor.execute('INSERT INTO user_bill (user_id, bill_id, money, use) VALUES (?, ?, ?, ?)',
                                     (user_id, bill.bill_id, billamount, use))
                await db.commit()
                await state.finish()
                await asyncio.sleep(900)
                status = bill.status
                if status == "PAID":
                    try:
                        await bot.send_message(admin,
                                               text=f'–°—á–µ—Ç –±—ã–ª –æ–ø–ª–∞—á–µ–Ω\n–ö–æ–º–µ–Ω—Ç {comment}\nBill_id {bill.bill_id}')
                    except Exception as e:
                        print(e, "topup")
                else:
                    try:
                        await cursor.execute('DELETE FROM user_bill WHERE bill_id = ?', (bill.bill_id,))
                        await db.commit()
                        await bot.send_message(admin,
                                               text=f'–°—á–µ—Ç –±—ã–ª –Ω–µ –æ–ø–ª–∞—á–µ–Ω\n–ö–æ–º–µ–Ω—Ç {comment}\nBill_id {bill.bill_id}')
                    except Exception as e:
                        print(e, "topup1")


@dp.callback_query_handler(Text(startswith="up99"), state="*")
async def topups2(msg: types.CallbackQuery, state: FSMContext):
    await msg.message.delete()
    user_id = msg.from_user.id
    amount = 99
    comment = f'{user_id}_{random.randrange(10000000, 9999999999)}'
    bill = await p2p.bill(amount=amount, lifetime=15, comment=comment)
    bill_id = InlineKeyboardButton("üí≤ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"Check_{bill.bill_id}")
    url = InlineKeyboardButton("üí≥ –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ", url=bill.pay_url)
    cansel = InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data=f"Checkoof_{bill.bill_id}")
    topup = InlineKeyboardMarkup(row_width=2).add(url, bill_id).add(cansel)
    await msg.message.answer(
        f'üí∞ –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: *{amount}‚ÇΩ*\ \n\nüîí –û–ø–ª–∞—Ç–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –±–µ–∑–æ–ø–∞—Å–Ω–∞ –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ –ø–ª–∞—Ç—ë–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã\.\n\nüá∑üá∫ –û–ø–ª–∞—Ç–∏—Ç—å –º–æ–∂–Ω–æ –∫–∞—Ä—Ç–æ–π –ª—é–±–æ–≥–æ —Ä–æ—Å—Å–∏–π—Å–∫–æ–≥–æ –±–∞–Ω–∫–∞ \(–°–±–µ—Ä, –¢–∏–Ω—å–∫–æ—Ñ—Ñ, –ö–∏–≤–∏ –∏ —Ç\.–¥\.\)\.\n\nüïî –°—Ä–µ–¥—Å—Ç–≤–∞ –Ω–∞ –±–∞–ª–∞–Ω—Å –±–æ—Ç–∞ –ø–æ—Å—Ç—É–ø–∞—é—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 1\-2 –º–∏–Ω\.\n\nü§ñ –ß—Ç–æ–±—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞ –æ–ø–ª–∞—Ç–∏—Ç–µ –∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É¬ª',
        reply_markup=topup, parse_mode=types.ParseMode.MARKDOWN_V2)
    await bot.send_message(admin,
                           text=f'–¢—É—Ç —á–µ–ª {user_id} —Ö–æ—á–µ—Ç –æ–ø–ª–∞—Ç–∏—Ç—å —Å—á–µ—Ç –Ω–∞ {amount}—Ä, –≤–æ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É {bill.pay_url}, –ö–æ–º–µ–Ω—Ç {comment}\nBill_id {bill.bill_id}')
    async with aiosqlite.connect("BalanceUser.db") as db:
        async with db.cursor() as cursor:
            use = 0
            billamount = bill.amount
            billamount = str(billamount).split('.')[0]
            await cursor.execute('INSERT INTO user_bill (user_id, bill_id, money, use) VALUES (?, ?, ?, ?)',
                                 (user_id, bill.bill_id, billamount, use))
            await db.commit()
            await state.finish()
            await asyncio.sleep(900)
            status = bill.status
            if status == "PAID":
                try:
                    await bot.send_message(admin, text=f'–°—á–µ—Ç –±—ã–ª –æ–ø–ª–∞—á–µ–Ω\n–ö–æ–º–µ–Ω—Ç {comment}\nBill_id {bill.bill_id}')
                except Exception as e:
                    print(e, "topup")
            else:
                try:
                    await cursor.execute('DELETE FROM user_bill WHERE bill_id = ?', (bill.bill_id,))
                    await db.commit()
                    await bot.send_message(admin, text=f'–°—á–µ—Ç –±—ã–ª –Ω–µ –æ–ø–ª–∞—á–µ–Ω\n–ö–æ–º–µ–Ω—Ç {comment}\nBill_id {bill.bill_id}')
                except Exception as e:
                    print(e, "topup1")
    await msg.answer("")


@dp.callback_query_handler(Text(startswith="back"), state="*")
async def back(msg: types.CallbackQuery, state: FSMContext):
    try:
        button_api = InlineKeyboardButton(text='‚ûï –î–æ–±–∞–≤–∏—Ç—å API', callback_data='api_add')
        button_balance = InlineKeyboardButton(text='üí∞ –ë–∞–ª–∞–Ω—Å', callback_data='balance')
        button_support = InlineKeyboardButton(text='üë®üèª\u200düíª –ü–æ–¥–¥–µ—Ä–∂–∫–∞', url="https://t.me/roboticselleradmin")
        LK = InlineKeyboardMarkup(row_width=2).add(button_api, button_balance, button_support)
        await msg.message.edit_text("–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", reply_markup=LK)
        user_id = msg.from_user.id
        last_message = "–ù–∞–∑–∞–¥"
        await DB_user(user_id, last_message)
        await state.finish()
        await msg.answer("")
    except:
        button_api = InlineKeyboardButton(text='‚ûï –î–æ–±–∞–≤–∏—Ç—å API', callback_data='api_add')
        button_balance = InlineKeyboardButton(text='üí∞ –ë–∞–ª–∞–Ω—Å', callback_data='balance')
        button_support = InlineKeyboardButton(text='üë®üèª\u200düíª –ü–æ–¥–¥–µ—Ä–∂–∫–∞', url="https://t.me/roboticselleradmin")
        LK = InlineKeyboardMarkup(row_width=2).add(button_api, button_balance, button_support)
        await msg.message.delete()
        await msg.message.answer("–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", reply_markup=LK)
        user_id = msg.from_user.id
        last_message = "–ù–∞–∑–∞–¥"
        await DB_user(user_id, last_message)
        await state.finish()
        await msg.answer("")


@dp.callback_query_handler(Text(startswith="deposits"))
async def deposits(msg: types.CallbackQuery):
    user_id = msg.from_user.id
    await msg.answer("")
    async with aiosqlite.connect(r"BalanceUser.db") as db:
        async with db.cursor() as cursor:
            await cursor.execute('SELECT * FROM user_info WHERE user_id = ?', (user_id,))
            user_info = await cursor.fetchone()
            if user_info is None:
                await cursor.execute('INSERT INTO user_info (user_id, deposits, offs) VALUES (?, ?, ?)',
                                     (user_id, '', ''))
                await db.commit()
                await msg.message.answer("üßæ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏—è\n\n–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–π –µ—â—ë –Ω–µ –±—ã–ª–æ.")
            else:
                if user_info[1] != "":
                    dates = user_info[1].split(',')
                    await msg.message.answer(f"üßæ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏—è\n\n{''.join(dates)}")
                else:
                    await msg.message.answer("üßæ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏—è\n\n–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–π –µ—â—ë –Ω–µ –±—ã–ª–æ.")


@dp.callback_query_handler(Text(startswith="write-offs"))
async def offs(msg: types.CallbackQuery):
    user_id = msg.from_user.id
    await msg.answer("")
    async with aiosqlite.connect(r"BalanceUser.db") as db:
        async with db.cursor() as cursor:
            await cursor.execute('SELECT * FROM user_info WHERE user_id = ?', (user_id,))
            user_info = await cursor.fetchone()
            if user_info is None:
                await cursor.execute('INSERT INTO user_info (user_id, deposits, offs) VALUES (?, ?, ?)',
                                     (user_id, '', ''))
                await db.commit()
                await msg.message.answer("üßæ –°–ø–∏—Å–∞–Ω–∏—è\n\n–°–ø–∏—Å–∞–Ω–∏–π —Å –≤–∞—à–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞ –µ—â—ë –Ω–µ –±—ã–ª–æ.")
            else:
                if user_info[2] != "":
                    dates = user_info[2].split(',')
                    await msg.message.answer(f"üßæ –°–ø–∏—Å–∞–Ω–∏—è\n\n{''.join(dates)}")
                else:
                    await msg.message.answer("üßæ –°–ø–∏—Å–∞–Ω–∏—è\n\n–°–ø–∏—Å–∞–Ω–∏–π —Å –≤–∞—à–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞ –µ—â—ë –Ω–µ –±—ã–ª–æ.")


# ____________________________________________________________


async def set_default_commands():
    await dp.bot.set_my_commands([
        types.BotCommand("start", "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
        types.BotCommand("balance", "–ë–∞–ª–∞–Ω—Å"),
        types.BotCommand("articles", "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–¥–∞–∫—Ç–æ—Ä —Å–∫–∏–¥–∫–∏"),
        types.BotCommand("prices", "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω–∞–º–∏")
    ])


async def MassSend(text, notf):
    db = await aiosqlite.connect(r"Users.db")
    cursor = await db.cursor()
    await cursor.execute('SELECT user_id FROM user')
    user_ids = await cursor.fetchall()
    loop = 0
    loop1 = 1
    d = len(user_ids)
    for user_id in user_ids:
        try:
            await bot.send_message(user_id[0], disable_notification=notf, text=text)
            await bot.send_message(admin, disable_notification=True,
                                   text=f'[{loop}/{d}]({user_id[0]})')
            loop = loop + 1
            await asyncio.sleep(0.4)
            if loop == 80:
                await asyncio.sleep(20)
        except Exception as e:
            await bot.send_message(admin, disable_notification=False, text=f'{user_id[0]} ERROR: {e}')
            loop1 = loop1 + 1
    await bot.send_message(admin, disable_notification=False, text=f'ERRORS: {loop1}')
    await cursor.close()
    await db.close()


async def MassSendSubs(text, notf):
    db = await aiosqlite.connect(r"Users.db")
    cursor = await db.cursor()
    await cursor.execute('SELECT * FROM user')
    user_ids = await cursor.fetchall()
    loop = 0
    loop1 = 1
    d = len(user_ids)
    for user_id in user_ids:
        deposits = user_id[1]
        offs = user_id[2]
        sub = user_id[3]
        sub_date = user_id[4]
        if str(sub) == str(1):
            try:
                await bot.send_message(user_id[0], disable_notification=notf, text=text)
                await bot.send_message(admin, disable_notification=True,
                                       text=f'[{loop}/{d}]({user_id[0]})')
                loop = loop + 1
                await asyncio.sleep(0.4)
                if loop == 80:
                    await asyncio.sleep(20)
            except Exception as e:
                await bot.send_message(admin, disable_notification=False, text=f'{user_id[0]} ERROR: {e}')
                loop1 = loop1 + 1
    await bot.send_message(admin, disable_notification=False, text=f'ERRORS: {loop1}')
    await cursor.close()
    await db.close()


async def DB_Get_Passed(user_id):
    async with aiosqlite.connect(r"BalanceUser.db") as db:
        cursor = await db.cursor()
        a = await dp.bot.get_chat(user_id)
        await cursor.execute('SELECT * FROM user_info WHERE user_id = ?', (user_id,))
        info = await cursor.fetchone()
        if info is not None:
            passed = info[3]
            if passed != 0:
                return True
            else:
                return False
        else:
            await cursor.execute('INSERT INTO user_info (user_id, deposits, offs) VALUES (?, ?, ?)',
                                 (user_id, '', ''))
            await db.commit()
            return False


async def DB_key(user_id, key):
    try:
        async with aiosqlite.connect(r"Users.db") as db:
            cursor = await db.cursor()
            a = await dp.bot.get_chat(user_id)
            await cursor.execute('SELECT * FROM user WHERE user_id = ?', (user_id,))
            group = await cursor.fetchone()
            if group is not None:
                user_id = group[0]
                nmid = key
                key = group[2]
                key1 = group[3]
                last_message = group[4]
                balanse = group[5]
                nm = group[6]
                await cursor.execute(
                    'INSERT INTO user (user_id, nmid, key, key1, last_message, balanse, nm) VALUES (?, ?, ?, ?, ?, ?, ?)',
                    (user_id, nmid, key, key1, last_message, balanse, nm))
                await db.commit()
                await bot.send_message(admin, f"–Æ–∑–µ—Ä @{a.username}({a.id}: –ö–ª—é—á –±—ã–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω –≤ –ë–î!")
                return True
            else:
                await DB_reg(user_id, f"/key {key}")
                return False
    except Exception as x:
        print(f"[ERROR]: DB_key: {x}")


async def DB_nmid(user_id):
    try:
        async with aiosqlite.connect(r"Users.db") as db:
            cursor = await db.cursor()
            await dp.bot.get_chat(user_id)
            await cursor.execute('SELECT * FROM user WHERE user_id = ?', (user_id,))
            group = await cursor.fetchone()
            if group is not None:
                key = group[2]
                key1 = group[3]
                nm = group[6]
                if key == "[]":
                    key = None
                if key1 == "[]":
                    key1 = None
                return key, key1, nm
            else:
                await DB_reg(user_id, f"DB_nmid")
                return False
    except Exception as q:
        print(f"[ERROR]: DB_nmid: {q}")


async def DB_nmid_set_key(user_id, key, key1, nm):
    try:
        async with aiosqlite.connect(r"Users.db") as db:
            cursor = await db.cursor()
            await cursor.execute('SELECT * FROM user WHERE user_id = ?', (user_id,))
            group = await cursor.fetchone()
            if group is not None:
                user_id = group[0]
                nmid = group[1]
                if key is None:
                    key = group[2]
                if key1 is None:
                    key1 = group[3]
                if nm is None:
                    nm = group[6]
                last_message = group[4]
                balanse = group[5]
                await cursor.execute(
                    'INSERT INTO user (user_id, nmid, key, key1, last_message, balanse, nm) VALUES (?, ?, ?, ?, ?, ?, ?)',
                    (user_id, nmid, str(key), str(key1), last_message, balanse, str(nm)))
                await db.commit()
            else:
                await DB_reg(user_id, f"DB_nmid_set_key")
                return False
    except Exception as e1:
        print(f"[ERROR]: DB_nmid_set_key: {e1}")


async def DB_get_key(user_id):
    try:
        async with aiosqlite.connect(r"Users.db") as db:
            cursor = await db.cursor()
            await cursor.execute('SELECT * FROM user WHERE user_id = ?', (user_id,))
            group = await cursor.fetchone()
            if group is not None:
                return group[1]
            else:
                await DB_reg(user_id, f"")
                return None
    except Exception as ex:
        print(f"[ERROR]: DB_get_key: {ex}")


async def DB_reg(user_id: str, last_message: str):
    try:
        async with aiosqlite.connect(r"Users.db") as db:
            cursor = await db.cursor()
            await cursor.execute('SELECT user_id FROM user WHERE user_id = ?', (user_id,))
            user_idsa = await cursor.fetchone()
            a = await dp.bot.get_chat(user_id)
            if user_idsa is None:
                await cursor.execute('INSERT INTO user (user_id, last_message) VALUES (?, ?)', (user_id, last_message))
                await db.commit()
                a = await dp.bot.get_chat(user_id)
                await bot.send_message(admin, f'–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è @{a.username}({user_id}): {last_message}')
            elif user_idsa is not None:
                await DB_user(user_id, f'–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è {last_message}')
    except Exception as ex:
        print(f"[ERROR]: DB_reg: {ex}")


async def DB_user(user_id: str, last_message: str):
    try:
        async with aiosqlite.connect(r"Users.db") as db:
            cursor = await db.cursor()
            a = await dp.bot.get_chat(user_id)
            await cursor.execute('SELECT * FROM user WHERE user_id = ?', (user_id,))
            group = await cursor.fetchone()
            if group is not None:
                user_id = group[0]
                nmid = group[1]
                key = group[2]
                key1 = group[3]
                balanse = group[5]
                nm = group[6]
                await cursor.execute(
                    'INSERT INTO user (user_id, nmid, key, key1, last_message, balanse, nm) VALUES (?, ?, ?, ?, ?, ?, ?)',
                    (user_id, nmid, key, key1, last_message, balanse, nm))
                await db.commit()
                await bot.send_message(admin, f"–Æ–∑–µ—Ä @{a.username}({a.id}): {last_message}")
            else:
                await DB_reg(user_id, last_message)
    except Exception as e3:
        print(f"[ERROR]: DB_user: {e3}")


@dp.message_handler(commands="start", state="*")
async def start(message: types.Message, state: FSMContext):
    button_api = InlineKeyboardButton(text='‚ûï –î–æ–±–∞–≤–∏—Ç—å API', callback_data='api_add')
    button_balance = InlineKeyboardButton(text='üí∞ –ë–∞–ª–∞–Ω—Å', callback_data='balance')
    button_support = InlineKeyboardButton(text='üë®üèª\u200düíª –ü–æ–¥–¥–µ—Ä–∂–∫–∞', url="https://t.me/roboticselleradmin")
    LK = InlineKeyboardMarkup(row_width=2).add(button_api, button_balance, button_support)
    await message.answer("–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", reply_markup=LK)
    user_id = message.from_user.id
    last_message = message.text
    await DB_reg(user_id, last_message)
    await DB_Get_Passed(user_id)
    await state.finish()
    await set_default_commands()


@dp.callback_query_handler(Text(startswith="api_add"))
async def api_add_callback(msg: types.CallbackQuery):
    user_id = msg.from_user.id
    passed = await DB_Get_Passed(user_id)
    if passed is True:
        url = "https://seller.wildberries.ru/supplier-settings/access-to-new-api"
        keyboard = InlineKeyboardMarkup()
        button = InlineKeyboardButton('–°—Å—ã–ª–∫–∞', url=url)
        button1 = InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data="back")
        keyboard.add(button, button1)
        with open(r'key.jpg', 'rb') as doc:
            await msg.message.delete()
            await msg.message.answer_photo(photo=doc,
                                           caption='üõ† –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï API\n\n1Ô∏è‚É£ –ó–∞–π–¥–∏—Ç–µ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç Wildberries –≤ —Ä–∞–∑–¥–µ–ª "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ > –î–æ—Å—Ç—É–ø –∫ –Ω–æ–≤–æ–º—É API".\n\n2Ô∏è‚É£ –ó–∞–¥–∞–π—Ç–µ –∏–º—è –∏ –Ω–∞–∂–º–∏—Ç–µ "–°–æ–∑–¥–∞—Ç—å –∫–ª—é—á".\n\n3Ô∏è‚É£ –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–ª—é—á –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ —ç—Ç–æ–≥–æ —á–∞—Ç–∞:',
                                           reply_markup=keyboard)
        await states.set_api.set()
    else:
        await msg.message.delete()
        await msg.message.answer("–ü—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞")
    await msg.answer()
    await DB_user(msg.from_user.id, msg.data)


@dp.message_handler(commands="key", state="*")
async def Set_Key(message: types.Message, state: FSMContext):
    await state.finish()
    user_id = message.from_user.id
    passed = await DB_Get_Passed(user_id)
    if passed is True:
        key = message.get_args()
        user_id = message.from_user.id
        if key != "":
            await bot.send_message(admin,
                                   f"–Æ–∑–µ—Ä @{message.from_user.username}({message.from_user.id}): –ó–∞–ø—Ä–æ—Å–∏–ª –ø—Ä–æ–≤–µ—Ä–∫—É —Å–≤–æ–µ–≥–æ –∫–ª—é—á–∞.")
            msg = await message.answer("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–∞....")
            headers = {
                'Authorization': key,
            }
            async with aiohttp.ClientSession() as session:
                response = await Get_Info(headers, session)
            if response[0] == 200:
                answer = await DB_key(user_id, key)
                if answer:
                    await msg.edit_text("–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ! –í–∞—à –∫–ª—é—á –±—ã–ª –∑–∞–ø–∏—Å–∞–Ω –≤ –ë–î.")
                else:
                    await msg.edit_text(
                        "–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ! –í–∞—à –∫–ª—é—á –Ω–µ –±—ã–ª –∑–∞–ø–∏—Å–∞–Ω –≤ –ë–î, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –µ–≥–æ –µ—â–µ —Ä–∞–∑!")
            elif response[0] == 401:
                await msg.edit_text("Api –∫–ª—é—á –Ω–µ –≤–µ—Ä–µ–Ω!")
            elif response[0] == 500:
                await msg.edit_text("–ü—Ä–æ—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É –Ω–∞ —Å–≤–æ–µ–π —Å—Ç–æ—Ä–æ–Ω–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ...")
        else:
            url = "https://seller.wildberries.ru/supplier-settings/access-to-new-api"
            keyboard = InlineKeyboardMarkup()
            button = InlineKeyboardButton('–°—Å—ã–ª–∫–∞', url=url)
            keyboard.add(button)
            await message.answer(
                "–í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –∫–ª—é—á!\n–ü–æ–ª—É—á–∏—Ç—å –∫–ª—é—á –º–æ–∂–Ω–æ –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ, –µ—Å–ª–∏ –≤—ã –Ω–µ –ø–æ–ª—É—á–∞–ª–∏ –∫–ª—é—á –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ –¥–ª—è –µ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è.\n\n–ü—Ä–∏–º–µ—Ä: '/key Api_key'",
                reply_markup=keyboard)
    else:
        await message.answer("–ü—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞")
        await message.delete()
    await DB_user(user_id, message.text)


@dp.message_handler(commands="articles", state="*")
async def Get_articles(message: types.Message, state: FSMContext):
    await state.finish()
    user_id = message.from_user.id
    passed = await DB_Get_Passed(user_id)
    if passed is True:
        answer = await DB_get_key(user_id)
        if answer is not None:
            headers = {
                'Authorization': answer,
            }
            async with aiohttp.ClientSession() as session:
                response = await Get_Info(headers, session)
                if response[0] == 200:
                    answer = response[1]
                    nmids = []
                    nms = []
                    for info in answer:
                        nm = info.get("nmId")
                        price = info.get("price")
                        discount = info.get("discount")
                        promoCode = info.get("promoCode")
                        nms.append(nm)
                    '''await message.answer(
                        f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–µ –∞—Ä—Ç–∏–∫–ª—ã.\n\n{''.join(nmids)}\n\n–í—ã–±–µ—Ä–∏ –∞—Ä—Ç–∏–∫–ª—ã –∏ –ø—Ä–∏—à–ª–∏ –º–Ω–µ –∫–æ–º–∞–Ω–¥—É '`/select_articles` –ù–æ–º–µ—Ä–∞ –∞—Ä—Ç–∏–∫–ª–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é\n\n–ü—Ä–∏–º–µ—Ä `/select_articles {nm}, 1234567`'",
                        parse_mode="Markdown")
                    '''
                    loop = 0
                    loop1 = 1
                    inline_kb1 = InlineKeyboardMarkup()
                    inline_kb1.row_width = 2
                    next = InlineKeyboardButton(f"–í—ã–±—Ä–∞—Ç—å –≤—Å–µ", callback_data=f'Sellect_all')
                    inline_kb1 = inline_kb1.add(next)
                    a = await DB_nmid(user_id)
                    if a[2] is not None:
                        a = a[2].split(',')
                    else:
                        a = []
                    for nm in nms:
                        l = len(nms) - 1
                        if l != loop:
                            if loop >= 6:
                                if loop1 == 1:
                                    next = InlineKeyboardButton(f"‚û°Ô∏è", callback_data=f'Next_{nm}')
                                    inline_btn_1 = InlineKeyboardButton(f"{nm} ‚úÖ", callback_data=f'selecT_{nm}')
                                    inline_kb1 = inline_kb1.add(inline_btn_1, next)
                                elif loop1 == 2:
                                    next = InlineKeyboardButton(f"‚û°Ô∏è", callback_data=f'Next_{nm}')
                                    inline_btn_2 = InlineKeyboardButton(f"{nm} ‚úÖ", callback_data=f'selecT_{nm}')
                                    inline_kb1 = inline_kb1.add(inline_btn_1, inline_btn_2, next)
                                break
                            if str(nm) in a:
                                if loop1 == 1:
                                    inline_btn_1 = InlineKeyboardButton(f"{nm} ‚úÖ", callback_data=f'selecT_{nm}')
                                elif loop1 == 2:
                                    inline_btn_2 = InlineKeyboardButton(f"{nm} ‚úÖ", callback_data=f'selecT_{nm}')
                                    inline_kb1 = inline_kb1.add(inline_btn_1, inline_btn_2)
                                    loop1 = 0
                            else:
                                if loop1 == 1:
                                    inline_btn_1 = InlineKeyboardButton(f"{nm} ‚ùå", callback_data=f'select_None_{nm}')
                                elif loop1 == 2:
                                    inline_btn_2 = InlineKeyboardButton(f"{nm} ‚ùå", callback_data=f'select_None_{nm}')
                                    inline_kb1 = inline_kb1.add(inline_btn_1, inline_btn_2)
                                    loop1 = 0
                                    # last = InlineKeyboardButton(f"–ü—Ä–µ–≤–µ–¥. —Å—Ç—Ä–∞–Ω–∏—Ü–∞", callback_data=f'last_{nm}')
                            loop1 = loop1 + 1
                            loop = loop + 1
                        else:
                            if str(nm) in a:
                                if loop1 == 1:
                                    inline_btn_1 = InlineKeyboardButton(f"{nm} ‚úÖ", callback_data=f'selecT_{nm}')
                                    inline_kb1 = inline_kb1.add(inline_btn_1)
                                if loop1 == 2:
                                    inline_btn_2 = InlineKeyboardButton(f"{nm} ‚úÖ", callback_data=f'selecT_{nm}')
                                    inline_kb1 = inline_kb1.add(inline_btn_1, inline_btn_2)
                            else:
                                if loop1 == 1:
                                    inline_btn_1 = InlineKeyboardButton(f"{nm} ‚ùå", callback_data=f'select_None_{nm}')
                                    inline_kb1 = inline_kb1.add(inline_btn_1)
                                if loop1 == 2:
                                    inline_btn_2 = InlineKeyboardButton(f"{nm} ‚ùå", callback_data=f'select_None_{nm}')
                                    inline_kb1 = inline_kb1.add(inline_btn_1, inline_btn_2)
                    inline_kb1.add(InlineKeyboardButton(f"üîÅ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —Å–∫–∏–¥–æ–∫",
                                                        callback_data=f'Set_Standart_Sale'))
                    await message.answer(
                        "–í—ã–±–µ—Ä–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª—ã, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Å–∫–∏–¥–∫–∞ -30% –æ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ç–æ–≤–∞—Ä–∞ —Å 01:00 –¥–æ 06:00 –ø–æ –ú–°–ö",
                        reply_markup=inline_kb1)
                    await DB_user(user_id, last_message=message.text)
                elif response[0] == 401:
                    await message.answer("–í–∞—à –∫–ª—é—á –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–ª—É—á–∏—Ç–µ –Ω–æ–≤—ã–π api –∫–ª—é—á –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ")
                elif response[0] == 500:
                    await message.answer("–ü—Ä–æ—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É –Ω–∞ —Å–≤–æ–µ–π —Å—Ç–æ—Ä–æ–Ω–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ...")
        else:
            button_api = InlineKeyboardButton(text='‚ûï –î–æ–±–∞–≤–∏—Ç—å API', callback_data='api_add')
            button_balance = InlineKeyboardButton(text='üí∞ –ë–∞–ª–∞–Ω—Å', callback_data='balance')
            button_support = InlineKeyboardButton(text='üë®üèª\u200düíª –ü–æ–¥–¥–µ—Ä–∂–∫–∞', url="https://t.me/roboticselleradmin")
            LK = InlineKeyboardMarkup(row_width=2).add(button_api, button_balance, button_support)
            await message.answer("–£ –≤–∞—Å –Ω–µ —É–∫–∞–∑–∞–Ω API –∫–ª—é—á!", reply_markup=LK)
    else:
        await message.answer("–ü—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞")
        await message.delete()
    await DB_user(user_id, message.text)


@dp.message_handler(commands="prices", state="*")
async def Get_articles(message: types.Message, state: FSMContext):
    await state.finish()
    user_id = message.from_user.id
    passed = await DB_Get_Passed(user_id)
    if passed is True:
        Edit_menu = InlineKeyboardButton(text="–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∫–∏–¥–∫–∏", callback_data=f'Edit_menu')
        Set_price = InlineKeyboardButton(text='–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ü–µ–Ω—ã', callback_data='Setup_menu')
        LK = InlineKeyboardMarkup(row_width=2).add(Edit_menu, Set_price)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–º–µ–Ω—è—Ç—å", reply_markup=LK)
        await DB_user(user_id, message.text)
    else:
        await message.delete()
        await message.answer("–ü—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞")
    await DB_user(message.from_user.id, message.text)


# _____________________Menu_ALL__________________________
@dp.callback_query_handler(Text(startswith="Sellect_all"))
async def Sellect_all(msg: types.CallbackQuery):
    user_id = msg.from_user.id
    passed = await DB_Get_Passed(user_id)
    if passed is True:
        user_id = msg.from_user.id
        key = await DB_get_key(user_id)
        await msg.answer('')
        if key is not None:
            headers = {
                'Authorization': key,
            }
            async with aiohttp.ClientSession() as session:
                response = await Get_Info(headers, session)
            if response[0] == 200:
                answer = response[1]
                nms = []
                keys = []
                key1 = []
                for info in answer:
                    nm = info.get("nmId")
                    discount = info.get("discount")
                    if int(discount) > 5:
                        discountsale = discount - 29
                        if int(discountsale) < 5:
                            discountsale = 5
                    else:
                        discountsale = 5
                    keys.append({
                        "discount": discountsale,
                        "nm": nm
                    })
                    key1.append({
                        "discount": discount,
                        "nm": nm
                    })
                    nms.append(f"{nm},")
                inline = msg.message.reply_markup.inline_keyboard
                for i in inline:
                    for a in i:
                        text = a.text.split()
                        if text[1] == "‚úÖ" or text[1] == "‚ùå":
                            a.text = f"{text[0]} ‚úÖ"
                            a.callback_data = f"selecT_{text[0]}"
                        elif text[1] == "–≤—Å–µ":
                            a.text = f"–£–¥–∞–ª–∏—Ç—å –≤—Å–µ"
                            a.callback_data = "dell_all"
                inline = msg.message.reply_markup
                inline.add(InlineKeyboardButton(f"üîÅ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —Å–∫–∏–¥–æ–∫",
                                                callback_data=f'Set_Standart_Sale'))
                await msg.message.edit_text(
                    "–í—ã–±–µ—Ä–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª—ã, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Å–∫–∏–¥–∫–∞ -30% –æ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ç–æ–≤–∞—Ä–∞ —Å 01:00 –¥–æ 06:00 –ø–æ –ú–°–ö",
                    reply_markup=inline)
                await DB_nmid_set_key(user_id, keys, key1, "".join(nms))
            elif response[0] == 401:
                await msg.message.answer("Api –∫–ª—é—á –Ω–µ –≤–µ—Ä–µ–Ω!")
            elif response[0] == 500:
                await msg.message.answer("–ü—Ä–æ—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É –Ω–∞ —Å–≤–æ–µ–π —Å—Ç–æ—Ä–æ–Ω–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ...")
    else:
        await msg.message.delete()
        await msg.message.answer("–ü—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞")
    await msg.answer()
    await DB_user(msg.from_user.id, msg.data)


@dp.callback_query_handler(Text(startswith="dell_all"))
async def dell_all(msg: types.CallbackQuery):
    user_id = msg.from_user.id
    passed = await DB_Get_Passed(user_id)
    if passed is True:
        user_id = msg.from_user.id
        key = await DB_get_key(user_id)
        await msg.answer('')
        if key is not None:
            headers = {
                'Authorization': key,
            }
            async with aiohttp.ClientSession() as session:
                response = await Get_Info(headers, session)
            if response[0] == 200:
                nms = []
                keys = []
                key1 = []
                inline = msg.message.reply_markup.inline_keyboard
                for i in inline:
                    for a in i:
                        text = a.text.split()
                        if text[1] == "‚úÖ" or text[1] == "‚ùå":
                            a.text = f"{text[0]} ‚ùå"
                            a.callback_data = f"select_None_{text[0]}"
                        elif text[1] == "–≤—Å–µ":
                            a.text = f"–í—ã–±—Ä–∞—Ç—å –≤—Å–µ"
                            a.callback_data = "Sellect_all"
                inline = msg.message.reply_markup
                inline.add(InlineKeyboardButton(f"üîÅ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —Å–∫–∏–¥–æ–∫",
                                                callback_data=f'Set_Standart_Sale'))
                await msg.message.edit_text(
                    "–í—ã–±–µ—Ä–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª—ã, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Å–∫–∏–¥–∫–∞ -30% –æ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ç–æ–≤–∞—Ä–∞ —Å 01:00 –¥–æ 06:00 –ø–æ –ú–°–ö",
                    reply_markup=inline)
                await DB_nmid_set_key(user_id, keys, key1, "".join(nms))
            elif response[0] == 401:
                await msg.message.answer("Api –∫–ª—é—á –Ω–µ –≤–µ—Ä–µ–Ω!")
            elif response[0] == 500:
                await msg.message.answer("–ü—Ä–æ—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É –Ω–∞ —Å–≤–æ–µ–π —Å—Ç–æ—Ä–æ–Ω–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ...")
    else:
        await msg.message.delete()
        await msg.message.answer("–ü—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞")
    await msg.answer()
    await DB_user(msg.from_user.id, msg.data)


@dp.callback_query_handler(Text(startswith="selecT_"))
async def selecT_callback(msg: types.CallbackQuery):
    user_id = msg.from_user.id
    passed = await DB_Get_Passed(user_id)
    if passed is True:
        nm = msg.data.split("selecT_")[1]
        nm_s = nm
        inline = msg.message.reply_markup.inline_keyboard
        await msg.answer("")
        user_id = msg.from_user.id
        key = await DB_get_key(user_id)
        await msg.answer('')
        if key is not None:
            headers = {
                'Authorization': key,
            }
            async with aiohttp.ClientSession() as session:
                response = await Get_Info(headers, session)
            if response[0] == 200:
                answer = response[1]
                nms = []
                nmids = []
                keys = []
                key1 = []
                nmids = []
                keyses = await DB_nmid(user_id)
                temp = []
                if keyses[2] is not None:
                    keyses = keyses[2].split(",")
                    for k in keyses:
                        if str(k) == str(nm_s):
                            pass
                        else:
                            temp.append(k)
                    keyses = temp
                else:
                    keyses = []
                for info in answer:
                    nm = info.get("nmId")
                    discount = info.get("discount")
                    if int(discount) > 5:
                        discountsale = discount - 29
                        if int(discountsale) < 5:
                            discountsale = 5
                    else:
                        discountsale = 5
                    if str(nm) in keyses:
                        keys.append({
                            "discount": discountsale,
                            "nm": nm
                        })
                        key1.append({
                            "discount": discount,
                            "nm": nm
                        })
                        nms.append(f"{nm},")
                    nmids.append(nm)
                for i in inline:
                    for a in i:
                        if a.text == f"{nm_s} ‚úÖ":
                            a.text = f"{nm_s} ‚ùå"
                            a.callback_data = f"select_None_{nm_s}"
                            print(f"select_None_{nm_s}")
                inline = msg.message.reply_markup
                await msg.message.edit_text(
                    "–í—ã–±–µ—Ä–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª—ã, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Å–∫–∏–¥–∫–∞ -30% –æ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ç–æ–≤–∞—Ä–∞ —Å 01:00 –¥–æ 06:00 –ø–æ –ú–°–ö",
                    reply_markup=inline)
                await DB_nmid_set_key(user_id, keys, key1, "".join(nms))
            elif response[0] == 401:
                await msg.message.answer("Api –∫–ª—é—á –Ω–µ –≤–µ—Ä–µ–Ω!")
            elif response[0] == 500:
                await msg.message.answer("–ü—Ä–æ—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É –Ω–∞ —Å–≤–æ–µ–π —Å—Ç–æ—Ä–æ–Ω–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ...")
    else:
        await msg.message.answer("–ü—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞")
        await msg.message.delete()
    await msg.answer()
    await DB_user(msg.from_user.id, msg.data)


@dp.callback_query_handler(Text(startswith="select_None_"))
async def select_None_callback(msg: types.CallbackQuery):
    user_id = msg.from_user.id
    passed = await DB_Get_Passed(user_id)
    if passed is True:
        nm = msg.data.split("select_None_")[1]
        nm_s = nm
        inline = msg.message.reply_markup.inline_keyboard
        await msg.answer("")
        user_id = msg.from_user.id
        key = await DB_get_key(user_id)
        await msg.answer('')
        if key is not None:
            headers = {
                'Authorization': key,
            }
            async with aiohttp.ClientSession() as session:
                response = await Get_Info(headers, session)
            if response[0] == 200:
                answer = response[1]
                nms = []
                nmids = []
                keys = []
                key1 = []
                nmids = []
                keyses = await DB_nmid(user_id)
                if keyses[2] is not None:
                    keyses = keyses[2].split(",")
                    keyses.append(nm)
                else:
                    keyses = []
                    keyses.append(nm)
                for info in answer:
                    nm = info.get("nmId")
                    discount = info.get("discount")
                    if int(discount) > 5:
                        discountsale = discount - 29
                        if int(discountsale) < 5:
                            discountsale = 5
                    else:
                        discountsale = 5
                    if str(nm) in keyses:
                        keys.append({
                            "discount": discountsale,
                            "nm": nm
                        })
                        key1.append({
                            "discount": discount,
                            "nm": nm
                        })
                        nms.append(f"{nm},")
                    nmids.append(nm)
                for i in inline:
                    for a in i:
                        if a.text == f"{nm_s} ‚ùå":
                            a.text = f"{nm_s} ‚úÖ"
                            a.callback_data = f"selecT_{nm_s}"
                inline = msg.message.reply_markup
                await msg.message.edit_text(
                    "–í—ã–±–µ—Ä–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª—ã, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Å–∫–∏–¥–∫–∞ -30% –æ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ç–æ–≤–∞—Ä–∞ —Å 01:00 –¥–æ 06:00 –ø–æ –ú–°–ö",
                    reply_markup=inline)
                await DB_nmid_set_key(user_id, keys, key1, "".join(nms))
            elif response[0] == 401:
                await msg.message.answer("Api –∫–ª—é—á –Ω–µ –≤–µ—Ä–µ–Ω!")
            elif response[0] == 500:
                await msg.message.answer("–ü—Ä–æ—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É –Ω–∞ —Å–≤–æ–µ–π —Å—Ç–æ—Ä–æ–Ω–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ...")
    else:
        await msg.message.delete()
        await msg.message.answer("–ü—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞")
    await msg.answer()
    await DB_user(msg.from_user.id, msg.data)


@dp.callback_query_handler(Text(startswith="Last_"))
async def Last_callback(msg: types.CallbackQuery):
    user_id = msg.from_user.id
    passed = await DB_Get_Passed(user_id)
    if passed is True:
        nm = msg.data.split("Last_")[1]
        nm_s = nm
        user_id = msg.from_user.id
        answer = await DB_get_key(user_id)
        if answer is not None:
            headers = {
                'Authorization': answer,
            }
            async with aiohttp.ClientSession() as session:
                response = await Get_Info(headers, session)
                if response[0] == 200:
                    answer = response[1]
                    nmids = []
                    nms = []
                    for info in answer:
                        nm = info.get("nmId")
                        price = info.get("price")
                        discount = info.get("discount")
                        promoCode = info.get("promoCode")
                        nms.append(nm)
                    '''await message.answer(
                        f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–µ –∞—Ä—Ç–∏–∫–ª—ã.\n\n{''.join(nmids)}\n\n–í—ã–±–µ—Ä–∏ –∞—Ä—Ç–∏–∫–ª—ã –∏ –ø—Ä–∏—à–ª–∏ –º–Ω–µ –∫–æ–º–∞–Ω–¥—É '`/select_articles` –ù–æ–º–µ—Ä–∞ –∞—Ä—Ç–∏–∫–ª–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é\n\n–ü—Ä–∏–º–µ—Ä `/select_articles {nm}, 1234567`'",
                        parse_mode="Markdown")
                    '''
                    loop = 0
                    loop1 = 1
                    loop23 = 1
                    inline_kb1 = InlineKeyboardMarkup()
                    inline_kb1.row_width = 2
                    a = await DB_nmid(user_id)
                    if a[2] is not None:
                        a = a[2].split(',')
                    else:
                        a = []
                    passed = 0
                    for nm in nms:
                        if str(nm_s) == str(nm):
                            l = len(nms) - 1 - loop23
                            passed = 1
                        if passed == 1:
                            if l != loop:
                                passed = 1
                                if loop >= 6:
                                    if loop1 == 1:
                                        next = InlineKeyboardButton(f"‚û°Ô∏è", callback_data=f'Next_{nm}')
                                        inline_btn_1 = InlineKeyboardButton(f"{nm} ‚úÖ", callback_data=f'selecT_{nm}')
                                        inline_kb1 = inline_kb1.add(inline_btn_1, next)
                                    elif loop1 == 2:
                                        next = InlineKeyboardButton(f"‚û°Ô∏è", callback_data=f'Next_{nm}')
                                        inline_btn_2 = InlineKeyboardButton(f"{nm} ‚úÖ", callback_data=f'selecT_{nm}')
                                        inline_kb1 = inline_kb1.add(inline_btn_1, inline_btn_2, next)
                                    break
                                if str(nm) in a:
                                    if loop1 == 1:
                                        inline_btn_1 = InlineKeyboardButton(f"{nm} ‚úÖ", callback_data=f'selecT_{nm}')
                                    elif loop1 == 2:
                                        inline_btn_2 = InlineKeyboardButton(f"{nm} ‚úÖ", callback_data=f'selecT_{nm}')
                                        inline_kb1 = inline_kb1.add(inline_btn_1, inline_btn_2)
                                        loop1 = 0
                                else:
                                    if loop1 == 1:
                                        inline_btn_1 = InlineKeyboardButton(f"{nm} ‚ùå",
                                                                            callback_data=f'select_None_{nm}')
                                    elif loop1 == 2:
                                        inline_btn_2 = InlineKeyboardButton(f"{nm} ‚ùå",
                                                                            callback_data=f'select_None_{nm}')
                                        inline_kb1 = inline_kb1.add(inline_btn_1, inline_btn_2)
                                        loop1 = 0
                                        # last = InlineKeyboardButton(f"–ü—Ä–µ–≤–µ–¥. —Å—Ç—Ä–∞–Ω–∏—Ü–∞", callback_data=f'last_{nm}')
                                loop1 = loop1 + 1
                                loop = loop + 1
                            else:
                                if str(nm) in a:
                                    if loop1 == 1:
                                        inline_btn_1 = InlineKeyboardButton(f"{nm} ‚úÖ", callback_data=f'selecT_{nm}')
                                        inline_kb1 = inline_kb1.add(inline_btn_1)
                                    if loop1 == 2:
                                        inline_btn_2 = InlineKeyboardButton(f"{nm} ‚úÖ", callback_data=f'selecT_{nm}')
                                        inline_kb1 = inline_kb1.add(inline_btn_1, inline_btn_2)
                                else:
                                    if loop1 == 1:
                                        inline_btn_1 = InlineKeyboardButton(f"{nm} ‚ùå",
                                                                            callback_data=f'select_None_{nm}')
                                        inline_kb1 = inline_kb1.add(inline_btn_1)
                                    if loop1 == 2:
                                        inline_btn_2 = InlineKeyboardButton(f"{nm} ‚ùå",
                                                                            callback_data=f'select_None_{nm}')
                                        inline_kb1 = inline_kb1.add(inline_btn_1, inline_btn_2)
                        loop23 = loop23 + 1
                    inline_kb1.add(InlineKeyboardButton(f"üîÅ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —Å–∫–∏–¥–æ–∫",
                                                        callback_data=f'Set_Standart_Sale'))
                    await msg.message.edit_text(
                        "–í—ã–±–µ—Ä–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª—ã, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Å–∫–∏–¥–∫–∞ -30% –æ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ç–æ–≤–∞—Ä–∞ —Å 01:00 –¥–æ 06:00 –ø–æ –ú–°–ö",
                        reply_markup=inline_kb1)
                    await DB_user(user_id, last_message="–í—ã–±–æ—Ä –≤ –º–µ–Ω—é –∞—Ä—Ç–∏–∫–ª–æ–≤")
                elif response[0] == 401:
                    await msg.message.answer("–í–∞—à –∫–ª—é—á –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–ª—É—á–∏—Ç–µ –Ω–æ–≤—ã–π api –∫–ª—é—á –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ")
                elif response[0] == 500:
                    await msg.message.answer("–ü—Ä–æ—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É –Ω–∞ —Å–≤–æ–µ–π —Å—Ç–æ—Ä–æ–Ω–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ...")
    else:
        await msg.message.delete()
        await msg.message.answer("–ü—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞")
    await msg.answer()
    await DB_user(msg.from_user.id, msg.data)


@dp.callback_query_handler(Text(startswith="Next_"))
async def Next_callback(msg: types.CallbackQuery):
    user_id = msg.from_user.id
    passed = await DB_Get_Passed(user_id)
    if passed is True:
        nm = msg.data.split("Next_")[1]
        nm_s = nm
        inl = msg.message.reply_markup.inline_keyboard
        loop = 0
        start_nm = 0
        passed = 0
        for i in inl:
            for a in i:
                text = a.text.split()[1]
                callback_data = a.callback_data
                if text != f"–≤—Å–µ":
                    passed = 1
                    start_nm = a.text.split()[0]
                    break
            if passed == 1:
                break
        user_id = msg.from_user.id
        answer = await DB_get_key(user_id)
        if answer is not None:
            headers = {
                'Authorization': answer,
            }
            async with aiohttp.ClientSession() as session:
                response = await Get_Info(headers, session)
                if response[0] == 200:
                    answer = response[1]
                    nmids = []
                    nms = []
                    for info in answer:
                        nm = info.get("nmId")
                        price = info.get("price")
                        discount = info.get("discount")
                        promoCode = info.get("promoCode")
                        nms.append(nm)
                    '''await message.answer(
                        f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–µ –∞—Ä—Ç–∏–∫–ª—ã.\n\n{''.join(nmids)}\n\n–í—ã–±–µ—Ä–∏ –∞—Ä—Ç–∏–∫–ª—ã –∏ –ø—Ä–∏—à–ª–∏ –º–Ω–µ –∫–æ–º–∞–Ω–¥—É '`/select_articles` –ù–æ–º–µ—Ä–∞ –∞—Ä—Ç–∏–∫–ª–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é\n\n–ü—Ä–∏–º–µ—Ä `/select_articles {nm}, 1234567`'",
                        parse_mode="Markdown")
                    '''
                    loop = 0
                    loop1 = 1
                    loop23 = 1
                    inline_kb1 = InlineKeyboardMarkup()
                    inline_kb1.row_width = 2
                    next = InlineKeyboardButton(f"–í—ã–±—Ä–∞—Ç—å –≤—Å–µ", callback_data=f'Sellect_all')
                    inline_kb1 = inline_kb1.add(next)
                    a = await DB_nmid(user_id)
                    if a[2] is not None:
                        a = a[2].split(',')
                    else:
                        a = []
                    passed = 0
                    for nm in nms:
                        if passed == 1:
                            if l != loop:
                                if loop >= 6:
                                    if nm in a:
                                        if loop1 == 1:
                                            inline_btn_1 = InlineKeyboardButton(f"{nm} ‚úÖ",
                                                                                callback_data=f'select_None_{nm}')
                                            next = InlineKeyboardButton(f"‚û°Ô∏è", callback_data=f'Next_{nm}')
                                            last = InlineKeyboardButton(f"‚¨ÖÔ∏è", callback_data=f"Last_{start_nm}")
                                            inline_kb1 = inline_kb1.add(inline_btn_1, last, next)
                                        elif loop1 == 2:
                                            inline_btn_2 = InlineKeyboardButton(f"{nm} ‚úÖ",
                                                                                callback_data=f'select_None_{nm}')
                                            next = InlineKeyboardButton(f"‚û°Ô∏è", callback_data=f'Next_{nm}')
                                            last = InlineKeyboardButton(f"‚¨ÖÔ∏è", callback_data=f"Last_{start_nm}")
                                            inline_kb1 = inline_kb1.add(inline_btn_1, inline_btn_2, last, next)
                                    else:
                                        if loop1 == 1:
                                            inline_btn_1 = InlineKeyboardButton(f"{nm} ‚ùå",
                                                                                callback_data=f'select_None_{nm}')
                                            next = InlineKeyboardButton(f"‚û°Ô∏è", callback_data=f'Next_{nm}')
                                            last = InlineKeyboardButton(f"‚¨ÖÔ∏è", callback_data=f"Last_{start_nm}")
                                            inline_kb1 = inline_kb1.add(inline_btn_1, last, next)
                                        elif loop1 == 2:
                                            inline_btn_2 = InlineKeyboardButton(f"{nm} ‚ùå",
                                                                                callback_data=f'select_None_{nm}')
                                            next = InlineKeyboardButton(f"‚û°Ô∏è", callback_data=f'Next_{nm}')
                                            last = InlineKeyboardButton(f"‚¨ÖÔ∏è", callback_data=f"Last_{start_nm}")
                                            inline_kb1 = inline_kb1.add(inline_btn_1, inline_btn_2, last, next)
                                    break
                                if str(nm) in a:
                                    if loop1 == 1:
                                        inline_btn_1 = InlineKeyboardButton(f"{nm} ‚úÖ", callback_data=f'selecT_{nm}')
                                    elif loop1 == 2:
                                        inline_btn_2 = InlineKeyboardButton(f"{nm} ‚úÖ", callback_data=f'selecT_{nm}')
                                        inline_kb1 = inline_kb1.add(inline_btn_1, inline_btn_2)
                                        loop1 = 0
                                else:
                                    if loop1 == 1:
                                        inline_btn_1 = InlineKeyboardButton(f"{nm} ‚ùå",
                                                                            callback_data=f'select_None_{nm}')
                                    elif loop1 == 2:
                                        inline_btn_2 = InlineKeyboardButton(f"{nm} ‚ùå",
                                                                            callback_data=f'select_None_{nm}')
                                        inline_kb1 = inline_kb1.add(inline_btn_1, inline_btn_2)
                                        loop1 = 0
                                        # last = InlineKeyboardButton(f"–ü—Ä–µ–≤–µ–¥. —Å—Ç—Ä–∞–Ω–∏—Ü–∞", callback_data=f'last_{nm}')
                            else:
                                if str(nm) in a:
                                    if loop1 == 1:
                                        inline_btn_1 = InlineKeyboardButton(f"{nm} ‚úÖ", callback_data=f'selecT_{nm}')
                                        last = InlineKeyboardButton(f"‚¨ÖÔ∏è", callback_data=f"Last_{start_nm}")
                                        inline_kb1 = inline_kb1.add(last, inline_btn_1)
                                    if loop1 == 2:
                                        inline_btn_2 = InlineKeyboardButton(f"{nm} ‚úÖ", callback_data=f'selecT_{nm}')
                                        last = InlineKeyboardButton(f"‚¨ÖÔ∏è", callback_data=f"Last_{start_nm}")
                                        inline_kb1 = inline_kb1.add(inline_btn_1, inline_btn_2, last)
                                else:
                                    if loop1 == 1:
                                        inline_btn_1 = InlineKeyboardButton(f"{nm} ‚ùå",
                                                                            callback_data=f'select_None_{nm}')
                                        last = InlineKeyboardButton(f"‚¨ÖÔ∏è", callback_data=f"Last_{start_nm}")
                                        inline_kb1 = inline_kb1.add(inline_btn_1, last)
                                    if loop1 == 2:
                                        inline_btn_2 = InlineKeyboardButton(f"{nm} ‚ùå",
                                                                            callback_data=f'select_None_{nm}')
                                        last = InlineKeyboardButton(f"‚¨ÖÔ∏è", callback_data=f"Last_{start_nm}")
                                        inline_kb1 = inline_kb1.add(inline_btn_1, inline_btn_2, last)
                            loop = loop + 1
                            loop1 = loop1 + 1
                        if str(nm) == str(nm_s):
                            passed = 1
                            l = len(nms) - loop23 - 1
                        loop23 = loop23 + 1
                    inline_kb1.add(InlineKeyboardButton(f"üîÅ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —Å–∫–∏–¥–æ–∫",
                                                        callback_data=f'Set_Standart_Sale'))
                    await msg.message.edit_text(
                        "–í—ã–±–µ—Ä–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª—ã, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Å–∫–∏–¥–∫–∞ -30% –æ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ç–æ–≤–∞—Ä–∞ —Å 01:00 –¥–æ 06:00 –ø–æ –ú–°–ö",
                        reply_markup=inline_kb1)
                    await DB_user(user_id, last_message="–í—ã–±–æ—Ä –≤ –º–µ–Ω—é –∞—Ä—Ç–∏–∫–ª–æ–≤")
                elif response[0] == 401:
                    await msg.message.answer("–í–∞—à –∫–ª—é—á –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–ª—É—á–∏—Ç–µ –Ω–æ–≤—ã–π api –∫–ª—é—á –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ")
                elif response[0] == 500:
                    await msg.message.answer("–ü—Ä–æ—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É –Ω–∞ —Å–≤–æ–µ–π —Å—Ç–æ—Ä–æ–Ω–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ...")
    else:
        await msg.message.delete()
        await msg.message.answer("–ü—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞")
    await msg.answer()
    await DB_user(msg.from_user.id, msg.data)


# ____________________EDIT__________________________________


@dp.callback_query_handler(Text(startswith="Edit_Last_"))
async def Edit_Last_callback(msg: types.CallbackQuery):
    user_id = msg.from_user.id
    passed = await DB_Get_Passed(user_id)
    if passed is True:
        nm = msg.data.split("Last_")[1]
        nm_s = nm
        user_id = msg.from_user.id
        answer = await DB_get_key(user_id)
        if answer is not None:
            headers = {
                'Authorization': answer,
            }
            async with aiohttp.ClientSession() as session:
                response = await Get_Info(headers, session)
                if response[0] == 200:
                    answer = response[1]
                    nmids = []
                    nms = []
                    for info in answer:
                        nm = info.get("nmId")
                        price = info.get("price")
                        discount = info.get("discount")
                        promoCode = info.get("promoCode")
                        nms.append(nm)
                    '''await message.answer(
                        f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–µ –∞—Ä—Ç–∏–∫–ª—ã.\n\n{''.join(nmids)}\n\n–í—ã–±–µ—Ä–∏ –∞—Ä—Ç–∏–∫–ª—ã –∏ –ø—Ä–∏—à–ª–∏ –º–Ω–µ –∫–æ–º–∞–Ω–¥—É '`/select_articles` –ù–æ–º–µ—Ä–∞ –∞—Ä—Ç–∏–∫–ª–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é\n\n–ü—Ä–∏–º–µ—Ä `/select_articles {nm}, 1234567`'",
                        parse_mode="Markdown")
                    '''
                    loop = 0
                    loop1 = 1
                    loop23 = 1
                    inline_kb1 = InlineKeyboardMarkup()
                    inline_kb1.row_width = 2
                    passed = 0
                    start_nm = msg.data.split("Edit_Next_")
                    for nm in nms:
                        if str(nm_s) == str(nm):
                            l = len(nms) - 1 - loop23
                            passed = 1
                        if passed == 1:
                            if l != loop:
                                passed = 1
                                if loop >= 6:
                                    if loop1 == 1:
                                        inline_btn_1 = InlineKeyboardButton(f"{nm}",
                                                                            callback_data=f'edit_{nm}')
                                        next = InlineKeyboardButton(f"‚û°Ô∏è", callback_data=f'Edit_Next_{nm}')
                                        last = InlineKeyboardButton(f"‚¨ÖÔ∏è", callback_data=f"Edit_Last_{start_nm}")
                                        inline_kb1 = inline_kb1.add(inline_btn_1, last, next)
                                    elif loop1 == 2:
                                        inline_btn_2 = InlineKeyboardButton(f"{nm}",
                                                                            callback_data=f'edit_{nm}')
                                        next = InlineKeyboardButton(f"‚û°Ô∏è", callback_data=f'Edit_Next_{nm}')
                                        last = InlineKeyboardButton(f"‚¨ÖÔ∏è", callback_data=f"Edit_Last_{start_nm}")
                                        inline_kb1 = inline_kb1.add(inline_btn_1, inline_btn_2, last, next)
                                    break
                                if loop1 == 1:
                                    inline_btn_1 = InlineKeyboardButton(f"{nm}", callback_data=f'edit_{nm}')
                                elif loop1 == 2:
                                    inline_btn_2 = InlineKeyboardButton(f"{nm}", callback_data=f'edit_{nm}')
                                    inline_kb1 = inline_kb1.add(inline_btn_1, inline_btn_2)
                                    loop1 = 0
                                    # last = InlineKeyboardButton(f"–ü—Ä–µ–≤–µ–¥. —Å—Ç—Ä–∞–Ω–∏—Ü–∞", callback_data=f'last_{nm}')
                            else:
                                if loop1 == 1:
                                    next = InlineKeyboardButton(f"‚û°Ô∏è", callback_data=f'Edit_Next_{nm}')
                                    inline_btn_1 = InlineKeyboardButton(f"{nm}", callback_data=f'edit_{nm}')
                                    inline_kb1 = inline_kb1.add(inline_btn_1, next)
                                elif loop1 == 2:
                                    next = InlineKeyboardButton(f"‚û°Ô∏è", callback_data=f'Edit_Next_{nm}')
                                    inline_btn_2 = InlineKeyboardButton(f"{nm}", callback_data=f'edit_{nm}')
                                    inline_kb1 = inline_kb1.add(inline_btn_1, inline_btn_2, next)
                                break
                        loop23 = loop23 + 1
                        loop1 = loop1 + 1
                        loop = loop + 1
                    inline_kb1.add(InlineKeyboardButton(f"–ù–∞–∑–∞–¥",
                                                        callback_data=f'Set_Standart_Sale'))
                    await msg.message.edit_text(
                        "–í—ã–±–µ—Ä–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–≤—É—é —Å–∫–∏–¥–∫—É",
                        reply_markup=inline_kb1)
                    await DB_user(user_id, last_message="–í—ã–±–æ—Ä –≤ –º–µ–Ω—é –∞—Ä—Ç–∏–∫–ª–æ–≤")
                elif response[0] == 401:
                    await msg.message.answer("–í–∞—à –∫–ª—é—á –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–ª—É—á–∏—Ç–µ –Ω–æ–≤—ã–π api –∫–ª—é—á –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ")
                elif response[0] == 500:
                    await msg.message.answer("–ü—Ä–æ—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É –Ω–∞ —Å–≤–æ–µ–π —Å—Ç–æ—Ä–æ–Ω–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ...")
    else:
        await msg.message.delete()
        await msg.message.answer("–ü—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞")
    await msg.answer()
    await DB_user(msg.from_user.id, msg.data)


@dp.callback_query_handler(Text(startswith="Edit_Next_"))
async def Edit_Next_callback(msg: types.CallbackQuery):
    user_id = msg.from_user.id
    passed = await DB_Get_Passed(user_id)
    if passed is True:
        nm = msg.data.split("Edit_Next_")[1]
        nm_s = nm
        inl = msg.message.reply_markup.inline_keyboard
        loop = 0
        start_nm = 0
        passed = 0
        for i in inl:
            for a in i:
                text = a.text.split()[0]
                callback_data = a.callback_data
                if text != f"–≤—Å–µ":
                    passed = 1
                    start_nm = a.text.split()[0]
                    break
            if passed == 1:
                break
        user_id = msg.from_user.id
        answer = await DB_get_key(user_id)
        if answer is not None:
            headers = {
                'Authorization': answer,
            }
            async with aiohttp.ClientSession() as session:
                response = await Get_Info(headers, session)
                if response[0] == 200:
                    answer = response[1]
                    nmids = []
                    nms = []
                    for info in answer:
                        nm = info.get("nmId")
                        price = info.get("price")
                        discount = info.get("discount")
                        promoCode = info.get("promoCode")
                        nms.append(nm)
                    '''await message.answer(
                        f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–µ –∞—Ä—Ç–∏–∫–ª—ã.\n\n{''.join(nmids)}\n\n–í—ã–±–µ—Ä–∏ –∞—Ä—Ç–∏–∫–ª—ã –∏ –ø—Ä–∏—à–ª–∏ –º–Ω–µ –∫–æ–º–∞–Ω–¥—É '`/select_articles` –ù–æ–º–µ—Ä–∞ –∞—Ä—Ç–∏–∫–ª–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é\n\n–ü—Ä–∏–º–µ—Ä `/select_articles {nm}, 1234567`'",
                        parse_mode="Markdown")
                    '''
                    loop = 0
                    loop1 = 1
                    loop23 = 1
                    inline_kb1 = InlineKeyboardMarkup()
                    inline_kb1.row_width = 2
                    passed = 0
                    for nm in nms:
                        if passed == 1:
                            if l != loop:
                                if loop >= 6:
                                    if loop1 == 1:
                                        inline_btn_1 = InlineKeyboardButton(f"{nm}",
                                                                            callback_data=f'edit_{nm}')
                                        next = InlineKeyboardButton(f"‚û°Ô∏è", callback_data=f'Edit_Next_{nm}')
                                        last = InlineKeyboardButton(f"‚¨ÖÔ∏è", callback_data=f"Edit_Last_{start_nm}")
                                        inline_kb1 = inline_kb1.add(inline_btn_1, last, next)
                                    elif loop1 == 2:
                                        inline_btn_2 = InlineKeyboardButton(f"{nm}",
                                                                            callback_data=f'edit_{nm}')
                                        next = InlineKeyboardButton(f"‚û°Ô∏è", callback_data=f'Edit_Next_{nm}')
                                        last = InlineKeyboardButton(f"‚¨ÖÔ∏è", callback_data=f"Edit_Last_{start_nm}")
                                        inline_kb1 = inline_kb1.add(inline_btn_1, inline_btn_2, last, next)
                                    break
                                if loop1 == 1:
                                    inline_btn_1 = InlineKeyboardButton(f"{nm}",
                                                                        callback_data=f'edit_{nm}')
                                elif loop1 == 2:
                                    inline_btn_2 = InlineKeyboardButton(f"{nm}",
                                                                        callback_data=f'edit_{nm}')
                                    inline_kb1 = inline_kb1.add(inline_btn_1, inline_btn_2)
                                    loop1 = 0
                                    # last = InlineKeyboardButton(f"–ü—Ä–µ–≤–µ–¥. —Å—Ç—Ä–∞–Ω–∏—Ü–∞", callback_data=f'last_{nm}')
                            else:
                                if loop1 == 1:
                                    inline_btn_1 = InlineKeyboardButton(f"{nm}",
                                                                        callback_data=f'edit_{nm}')
                                    last = InlineKeyboardButton(f"‚¨ÖÔ∏è", callback_data=f"Edit_Last_{start_nm}")
                                    inline_kb1 = inline_kb1.add(inline_btn_1, last)
                                if loop1 == 2:
                                    inline_btn_2 = InlineKeyboardButton(f"{nm}",
                                                                        callback_data=f'edit_{nm}')
                                    last = InlineKeyboardButton(f"‚¨ÖÔ∏è", callback_data=f"Edit_Last_{start_nm}")
                                    inline_kb1 = inline_kb1.add(inline_btn_1, inline_btn_2, last)
                            loop = loop + 1
                            loop1 = loop1 + 1
                        if str(nm) == str(nm_s):
                            passed = 1
                            l = len(nms) - loop23 - 1
                        loop23 = loop23 + 1
                    inline_kb1.add(InlineKeyboardButton(f"–ù–∞–∑–∞–¥",
                                                        callback_data=f'Set_Standart_Sale'))
                    await msg.message.edit_text(
                        "–í—ã–±–µ—Ä–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–≤—É—é —Å–∫–∏–¥–∫—É",
                        reply_markup=inline_kb1)
                    await DB_user(user_id, last_message="–í—ã–±–æ—Ä –≤ –º–µ–Ω—é –∞—Ä—Ç–∏–∫–ª–æ–≤")
                elif response[0] == 401:
                    await msg.message.answer("–í–∞—à –∫–ª—é—á –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–ª—É—á–∏—Ç–µ –Ω–æ–≤—ã–π api –∫–ª—é—á –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ")
                elif response[0] == 500:
                    await msg.message.answer("–ü—Ä–æ—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É –Ω–∞ —Å–≤–æ–µ–π —Å—Ç–æ—Ä–æ–Ω–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ...")
    else:
        await msg.message.delete()
        await msg.message.answer("–ü—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞")
    await msg.answer()
    await DB_user(msg.from_user.id, msg.data)


@dp.callback_query_handler(Text(startswith="edit_yes"), state="*")
async def edit_yes_callback(msg: types.CallbackQuery, state: FSMContext):
    user_id = msg.from_user.id
    a = await state.get_data()
    await state.finish()
    if a != {}:
        sale = a.get("sale")
        nm = a.get("nm")
        cost = a.get("cost")
        headers = {
            'Authorization': await DB_get_key(user_id),
        }
        async with aiohttp.ClientSession() as session:
            response = await Get_Info(headers, session)
            if response[0] == 200:
                payload = [{
                    "discount": int(sale),
                    "nm": int(nm)
                }]
                responses = await Set_Sale(headers, session, payload)
                if int(responses[0]) == 200:
                    await msg.message.edit_text(
                        f"üü¢ –°–∫–∏–¥–∫–∞ <b>{sale}%</b>(<b>{cost}‚ÇΩ</b>) —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ –∞—Ä—Ç–∏–∫—É–ª <code>{nm}</code>",
                        reply_markup=None, parse_mode="HTML")
                elif int(responses[0]) == 400:
                    backs = InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data=f"edit_{nm}")
                    key = InlineKeyboardMarkup().add(backs)
                    error = responses[1].get("errors")[0].replace(";", '.\n    ')
                    passed = 1
                    temps = []
                    for temp in error.split():
                        if passed == 1:
                            passed = 0
                            temp = "\n" + temp.title()
                        if "." in temp:
                            passed = 1
                        temps.append(temp)
                    await msg.message.edit_text(f"üî¥ WB –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É:\n    {' '.join(temps)}", reply_markup=key)
            elif response[0] == 401:
                await msg.message.edit_text("Api –∫–ª—é—á –Ω–µ –≤–µ—Ä–µ–Ω!")
            elif response[0] == 500:
                await msg.message.edit_text("–ü—Ä–æ—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É –Ω–∞ —Å–≤–æ–µ–π —Å—Ç–æ—Ä–æ–Ω–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ...")
    else:
        await msg.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    await msg.answer()
    await DB_user(msg.from_user.id, msg.data)


@dp.callback_query_handler(Text(startswith="edit_not"), state="*")
async def edit_callback(msg: types.CallbackQuery, state: FSMContext):
    user_id = msg.from_user.id
    await msg.message.edit_text("–•–æ—Ä–æ—à–æ –æ—Ç–º–µ–Ω–µ–Ω–æ :)")
    await state.finish()
    await msg.answer()
    await DB_user(msg.from_user.id, msg.data)


@dp.callback_query_handler(Text(startswith="edit_"), state="*")
async def edit_callback(msg: types.CallbackQuery, state: FSMContext):
    user_id = msg.from_user.id
    nm = msg.data.split("edit_")[1]
    answer = await DB_get_key(user_id)
    await state.finish()
    if answer is not None:
        headers = {
            'Authorization': answer,
        }
        async with aiohttp.ClientSession() as session:
            response = await Get_Info(headers, session)
            if response[0] == 200:
                for info in response[1]:
                    if int(info.get("nmId")) == int(nm):
                        nm_sale = info.get("price")
                        sale = info.get("discount")
                        cost = nm_sale - (float(sale) / 100 * nm_sale)
                        backs = InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data="Edit_menu")
                        key = InlineKeyboardMarkup().add(backs)
                        await msg.message.edit_text(
                            f'<i>–ê—Ä—Ç–∏–∫—É–ª</i> <code>{nm}</code>\n–¢–µ–∫—É—â–∞—è —Å–∫–∏–¥–∫–∞ ‚Äì <b>{info.get("discount")}%\n</b>–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ –ø–æ—Å–ª–µ —Å–∫–∏–¥–∫–∏ ‚Äì <b>{int(cost)}‚ÇΩ\n\n</b>–ë–æ—Ç –º–æ–∂–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ—Å—Ç–∞–≤–∏—Ç—å –Ω—É–∂–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç —Å–∫–∏–¥–∫–∏ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–Ω–µ—á–Ω–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏. \n\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω–µ—á–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –∏–ª–∏ —Ä–∞–∑–º–µ—Ä —Å–∫–∏–¥–∫–∏ <b>—Å–æ –∑–Ω–∞–∫–æ–º %</b>:',
                            reply_markup=key, parse_mode="HTML")
                        await states.edit_sale.set()
                        await state.update_data(nm=nm, message_id=msg.message.message_id, chat_id=msg.message.chat.id)
    await msg.answer()
    await DB_user(msg.from_user.id, msg.data)


@dp.callback_query_handler(Text(startswith="Edit_menu"), state="*")
async def Get_articles(msg: types.CallbackQuery, state: FSMContext):
    user_id = msg.from_user.id
    await state.finish()
    passed = await DB_Get_Passed(user_id)
    if passed is True:
        answer = await DB_get_key(user_id)
        if answer is not None:
            headers = {
                'Authorization': answer,
            }
            async with aiohttp.ClientSession() as session:
                response = await Get_Info(headers, session)
                if response[0] == 200:
                    answer = response[1]
                    nmids = []
                    nms = []
                    for info in answer:
                        nm = info.get("nmId")
                        price = info.get("price")
                        discount = info.get("discount")
                        promoCode = info.get("promoCode")
                        nms.append(nm)
                    '''await message.answer(
                        f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–µ –∞—Ä—Ç–∏–∫–ª—ã.\n\n{''.join(nmids)}\n\n–í—ã–±–µ—Ä–∏ –∞—Ä—Ç–∏–∫–ª—ã –∏ –ø—Ä–∏—à–ª–∏ –º–Ω–µ –∫–æ–º–∞–Ω–¥—É '`/select_articles` –ù–æ–º–µ—Ä–∞ –∞—Ä—Ç–∏–∫–ª–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é\n\n–ü—Ä–∏–º–µ—Ä `/select_articles {nm}, 1234567`'",
                        parse_mode="Markdown")
                    '''
                    loop = 0
                    loop1 = 1
                    inline_kb1 = InlineKeyboardMarkup()
                    inline_kb1.row_width = 2
                    for nm in nms:
                        l = len(nms) - 1
                        if l != loop:
                            if loop >= 6:
                                if loop1 == 1:
                                    next = InlineKeyboardButton(f"‚û°Ô∏è", callback_data=f'Edit_Next_{nm}')
                                    inline_btn_1 = InlineKeyboardButton(f"{nm}", callback_data=f'edit_{nm}')
                                    inline_kb1 = inline_kb1.add(inline_btn_1, next)
                                elif loop1 == 2:
                                    next = InlineKeyboardButton(f"‚û°Ô∏è", callback_data=f'Edit_Next_{nm}')
                                    inline_btn_2 = InlineKeyboardButton(f"{nm}", callback_data=f'edit_{nm}')
                                    inline_kb1 = inline_kb1.add(inline_btn_1, inline_btn_2, next)
                                break
                            if loop1 == 1:
                                inline_btn_1 = InlineKeyboardButton(f"{nm}", callback_data=f'edit_{nm}')
                            elif loop1 == 2:
                                inline_btn_2 = InlineKeyboardButton(f"{nm}", callback_data=f'edit_{nm}')
                                inline_kb1 = inline_kb1.add(inline_btn_1, inline_btn_2)
                                loop1 = 0
                                # last = InlineKeyboardButton(f"–ü—Ä–µ–≤–µ–¥. —Å—Ç—Ä–∞–Ω–∏—Ü–∞", callback_data=f'last_{nm}')
                            loop1 = loop1 + 1
                            loop = loop + 1
                        else:
                            if loop1 == 1:
                                inline_btn_1 = InlineKeyboardButton(f"{nm}", callback_data=f'edit_{nm}')
                                inline_kb1 = inline_kb1.add(inline_btn_1)
                            if loop1 == 2:
                                inline_btn_2 = InlineKeyboardButton(f"{nm}", callback_data=f'edit_{nm}')
                                inline_kb1 = inline_kb1.add(inline_btn_1, inline_btn_2)
                    inline_kb1.add(InlineKeyboardButton(f"–ù–∞–∑–∞–¥",
                                                        callback_data=f'Set_Standart_Sale'))
                    await msg.message.edit_text(
                        "–í—ã–±–µ—Ä–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–≤—É—é —Å–∫–∏–¥–∫—É",
                        reply_markup=inline_kb1)
                elif response[0] == 401:
                    await msg.message.edit_text(
                        "–í–∞—à –∫–ª—é—á –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–ª—É—á–∏—Ç–µ –Ω–æ–≤—ã–π api –∫–ª—é—á –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ")
                elif response[0] == 500:
                    await msg.message.edit_text("–ü—Ä–æ—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É –Ω–∞ —Å–≤–æ–µ–π —Å—Ç–æ—Ä–æ–Ω–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ...")
        else:
            button_api = InlineKeyboardButton(text='‚ûï –î–æ–±–∞–≤–∏—Ç—å API', callback_data='api_add')
            button_balance = InlineKeyboardButton(text='üí∞ –ë–∞–ª–∞–Ω—Å', callback_data='balance')
            button_support = InlineKeyboardButton(text='üë®üèª\u200düíª –ü–æ–¥–¥–µ—Ä–∂–∫–∞', url="https://t.me/roboticselleradmin")
            LK = InlineKeyboardMarkup(row_width=2).add(button_api, button_balance, button_support)
            await msg.message.edit_text("–£ –≤–∞—Å –Ω–µ —É–∫–∞–∑–∞–Ω API –∫–ª—é—á!", reply_markup=LK)
    else:
        await msg.message.answer("–ü—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞")
        await msg.message.delete()
    await DB_user(user_id, msg.data)


# ____________________________________________________________


# ________________Setup Price_________________________________
@dp.callback_query_handler(Text(startswith="Setup_Last_"), state="*")
async def Edit_Last_callback(msg: types.CallbackQuery):
    user_id = msg.from_user.id
    passed = await DB_Get_Passed(user_id)
    if passed is True:
        nm = msg.data.split("Setup_Last_")[1]
        nm_s = nm
        user_id = msg.from_user.id
        answer = await DB_get_key(user_id)
        if answer is not None:
            headers = {
                'Authorization': answer,
            }
            async with aiohttp.ClientSession() as session:
                response = await Get_Info(headers, session)
                if response[0] == 200:
                    answer = response[1]
                    nmids = []
                    nms = []
                    for info in answer:
                        nm = info.get("nmId")
                        price = info.get("price")
                        discount = info.get("discount")
                        promoCode = info.get("promoCode")
                        nms.append(nm)
                    '''await message.answer(
                        f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–µ –∞—Ä—Ç–∏–∫–ª—ã.\n\n{''.join(nmids)}\n\n–í—ã–±–µ—Ä–∏ –∞—Ä—Ç–∏–∫–ª—ã –∏ –ø—Ä–∏—à–ª–∏ –º–Ω–µ –∫–æ–º–∞–Ω–¥—É '`/select_articles` –ù–æ–º–µ—Ä–∞ –∞—Ä—Ç–∏–∫–ª–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é\n\n–ü—Ä–∏–º–µ—Ä `/select_articles {nm}, 1234567`'",
                        parse_mode="Markdown")
                    '''
                    loop = 0
                    loop1 = 1
                    loop23 = 1
                    inline_kb1 = InlineKeyboardMarkup()
                    inline_kb1.row_width = 2
                    passed = 0
                    start_nm = msg.data.split("Edit_Next_")
                    for nm in nms:
                        if str(nm_s) == str(nm):
                            l = len(nms) - 1 - loop23
                            passed = 1
                        if passed == 1:
                            if l != loop:
                                passed = 1
                                if loop >= 6:
                                    if loop1 == 1:
                                        inline_btn_1 = InlineKeyboardButton(f"{nm}",
                                                                            callback_data=f'setup_{nm}')
                                        next = InlineKeyboardButton(f"‚û°Ô∏è", callback_data=f'Setup_Next_{nm}')
                                        last = InlineKeyboardButton(f"‚¨ÖÔ∏è", callback_data=f"Setup_Last_{start_nm}")
                                        inline_kb1 = inline_kb1.add(inline_btn_1, last, next)
                                    elif loop1 == 2:
                                        inline_btn_2 = InlineKeyboardButton(f"{nm}",
                                                                            callback_data=f'setup_{nm}')
                                        next = InlineKeyboardButton(f"‚û°Ô∏è", callback_data=f'Setup_Next_{nm}')
                                        last = InlineKeyboardButton(f"‚¨ÖÔ∏è", callback_data=f"Setup_Last_{start_nm}")
                                        inline_kb1 = inline_kb1.add(inline_btn_1, inline_btn_2, last, next)
                                    break
                                if loop1 == 1:
                                    inline_btn_1 = InlineKeyboardButton(f"{nm}", callback_data=f'setup_{nm}')
                                elif loop1 == 2:
                                    inline_btn_2 = InlineKeyboardButton(f"{nm}", callback_data=f'setup_{nm}')
                                    inline_kb1 = inline_kb1.add(inline_btn_1, inline_btn_2)
                                    loop1 = 0
                                    # last = InlineKeyboardButton(f"–ü—Ä–µ–≤–µ–¥. —Å—Ç—Ä–∞–Ω–∏—Ü–∞", callback_data=f'last_{nm}')
                            else:
                                if loop1 == 1:
                                    next = InlineKeyboardButton(f"‚û°Ô∏è", callback_data=f'Setup_Next_{nm}')
                                    inline_btn_1 = InlineKeyboardButton(f"{nm}", callback_data=f'setup_{nm}')
                                    inline_kb1 = inline_kb1.add(inline_btn_1, next)
                                elif loop1 == 2:
                                    next = InlineKeyboardButton(f"‚û°Ô∏è", callback_data=f'Setup_Next_{nm}')
                                    inline_btn_2 = InlineKeyboardButton(f"{nm}", callback_data=f'setup_{nm}')
                                    inline_kb1 = inline_kb1.add(inline_btn_1, inline_btn_2, next)
                                break
                        loop23 = loop23 + 1
                        loop1 = loop1 + 1
                        loop = loop + 1
                    inline_kb1.add(InlineKeyboardButton(f"–ù–∞–∑–∞–¥",
                                                        callback_data=f'Set_Standart_Sale'))
                    await msg.message.edit_text(
                        "–í—ã–±–µ—Ä–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–≤—É—é —Ü–µ–Ω—É",
                        reply_markup=inline_kb1)
                    await DB_user(user_id, last_message="–í—ã–±–æ—Ä –≤ –º–µ–Ω—é –∞—Ä—Ç–∏–∫–ª–æ–≤")
                elif response[0] == 401:
                    await msg.message.answer("–í–∞—à –∫–ª—é—á –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–ª—É—á–∏—Ç–µ –Ω–æ–≤—ã–π api –∫–ª—é—á –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ")
                elif response[0] == 500:
                    await msg.message.answer("–ü—Ä–æ—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É –Ω–∞ —Å–≤–æ–µ–π —Å—Ç–æ—Ä–æ–Ω–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ...")
    else:
        await msg.message.delete()
        await msg.message.answer("–ü—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞")
    await msg.answer()
    await DB_user(msg.from_user.id, msg.data)


@dp.callback_query_handler(Text(startswith="Setup_Next_"), state="*")
async def Edit_Next_callback(msg: types.CallbackQuery):
    user_id = msg.from_user.id
    passed = await DB_Get_Passed(user_id)
    if passed is True:
        nm = msg.data.split("Setup_Next_")[1]
        nm_s = nm
        inl = msg.message.reply_markup.inline_keyboard
        loop = 0
        start_nm = 0
        passed = 0
        for i in inl:
            for a in i:
                text = a.text.split()[0]
                callback_data = a.callback_data
                if text != f"–≤—Å–µ":
                    passed = 1
                    start_nm = a.text.split()[0]
                    break
            if passed == 1:
                break
        user_id = msg.from_user.id
        answer = await DB_get_key(user_id)
        if answer is not None:
            headers = {
                'Authorization': answer,
            }
            async with aiohttp.ClientSession() as session:
                response = await Get_Info(headers, session)
                if response[0] == 200:
                    answer = response[1]
                    nmids = []
                    nms = []
                    for info in answer:
                        nm = info.get("nmId")
                        price = info.get("price")
                        discount = info.get("discount")
                        promoCode = info.get("promoCode")
                        nms.append(nm)
                    '''await message.answer(
                        f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–µ –∞—Ä—Ç–∏–∫–ª—ã.\n\n{''.join(nmids)}\n\n–í—ã–±–µ—Ä–∏ –∞—Ä—Ç–∏–∫–ª—ã –∏ –ø—Ä–∏—à–ª–∏ –º–Ω–µ –∫–æ–º–∞–Ω–¥—É '`/select_articles` –ù–æ–º–µ—Ä–∞ –∞—Ä—Ç–∏–∫–ª–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é\n\n–ü—Ä–∏–º–µ—Ä `/select_articles {nm}, 1234567`'",
                        parse_mode="Markdown")
                    '''
                    loop = 0
                    loop1 = 1
                    loop23 = 1
                    inline_kb1 = InlineKeyboardMarkup()
                    inline_kb1.row_width = 2
                    passed = 0
                    for nm in nms:
                        if passed == 1:
                            if l != loop:
                                if loop >= 6:
                                    if loop1 == 1:
                                        inline_btn_1 = InlineKeyboardButton(f"{nm}",
                                                                            callback_data=f'setup_{nm}')
                                        next = InlineKeyboardButton(f"‚û°Ô∏è", callback_data=f'Setup_Next_{nm}')
                                        last = InlineKeyboardButton(f"‚¨ÖÔ∏è", callback_data=f"Setup_Last_{start_nm}")
                                        inline_kb1 = inline_kb1.add(inline_btn_1, last, next)
                                    elif loop1 == 2:
                                        inline_btn_2 = InlineKeyboardButton(f"{nm}",
                                                                            callback_data=f'setup_{nm}')
                                        next = InlineKeyboardButton(f"‚û°Ô∏è", callback_data=f'Setup_Next_{nm}')
                                        last = InlineKeyboardButton(f"‚¨ÖÔ∏è", callback_data=f"Setup_Last_{start_nm}")
                                        inline_kb1 = inline_kb1.add(inline_btn_1, inline_btn_2, last, next)
                                    break
                                if loop1 == 1:
                                    inline_btn_1 = InlineKeyboardButton(f"{nm}",
                                                                        callback_data=f'setup_{nm}')
                                elif loop1 == 2:
                                    inline_btn_2 = InlineKeyboardButton(f"{nm}",
                                                                        callback_data=f'setup_{nm}')
                                    inline_kb1 = inline_kb1.add(inline_btn_1, inline_btn_2)
                                    loop1 = 0
                                    # last = InlineKeyboardButton(f"–ü—Ä–µ–≤–µ–¥. —Å—Ç—Ä–∞–Ω–∏—Ü–∞", callback_data=f'last_{nm}')
                            else:
                                if loop1 == 1:
                                    inline_btn_1 = InlineKeyboardButton(f"{nm}",
                                                                        callback_data=f'setup_{nm}')
                                    last = InlineKeyboardButton(f"‚¨ÖÔ∏è", callback_data=f"Setup_Last_{start_nm}")
                                    inline_kb1 = inline_kb1.add(inline_btn_1, last)
                                if loop1 == 2:
                                    inline_btn_2 = InlineKeyboardButton(f"{nm}",
                                                                        callback_data=f'setup_{nm}')
                                    last = InlineKeyboardButton(f"‚¨ÖÔ∏è", callback_data=f"Setup_Last_{start_nm}")
                                    inline_kb1 = inline_kb1.add(inline_btn_1, inline_btn_2, last)
                            loop = loop + 1
                            loop1 = loop1 + 1
                        if str(nm) == str(nm_s):
                            passed = 1
                            l = len(nms) - loop23 - 1
                        loop23 = loop23 + 1
                    inline_kb1.add(InlineKeyboardButton(f"–ù–∞–∑–∞–¥",
                                                        callback_data=f'Set_Standart_Sale'))
                    await msg.message.edit_text(
                        "–í—ã–±–µ—Ä–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–≤—É—é —Ü–µ–Ω—É",
                        reply_markup=inline_kb1)
                    await DB_user(user_id, last_message="–í—ã–±–æ—Ä –≤ –º–µ–Ω—é –∞—Ä—Ç–∏–∫–ª–æ–≤")
                elif response[0] == 401:
                    await msg.message.answer("–í–∞—à –∫–ª—é—á –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–ª—É—á–∏—Ç–µ –Ω–æ–≤—ã–π api –∫–ª—é—á –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ")
                elif response[0] == 500:
                    await msg.message.answer("–ü—Ä–æ—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É –Ω–∞ —Å–≤–æ–µ–π —Å—Ç–æ—Ä–æ–Ω–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ...")
    else:
        await msg.message.delete()
        await msg.message.answer("–ü—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞")
    await msg.answer()
    await DB_user(msg.from_user.id, msg.data)


@dp.callback_query_handler(Text(startswith="setup_"), state="*")
async def Edit_Next_callback(msg: types.CallbackQuery, state: FSMContext):
    user_id = msg.from_user.id
    nm = msg.data.split("setup_")[1]
    answer = await DB_get_key(user_id)
    await state.finish()
    if answer is not None:
        headers = {
            'Authorization': answer,
        }
        async with aiohttp.ClientSession() as session:
            response = await Get_Info(headers, session)
            if response[0] == 200:
                for info in response[1]:
                    if int(info.get("nmId")) == int(nm):
                        nm_sale = info.get("price")
                        sale = info.get("discount")
                        cost = nm_sale - (float(sale) / 100 * nm_sale)
                        backs = InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data="Setup_menu")
                        key = InlineKeyboardMarkup().add(backs)
                        await msg.message.edit_text(
                            f'<i>–ê—Ä—Ç–∏–∫—É–ª</i> <code>{nm}\n</code>–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ –±–µ–∑ —Å–∫–∏–¥–∫–∏ ‚Äì <b>{nm_sale}‚ÇΩ\n</b>–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ –ø–æ—Å–ª–µ —Å–∫–∏–¥–∫–∏ ‚Äì <b>{cost}‚ÇΩ ({sale}%)</b>\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É <b>–¥–æ —Å–∫–∏–¥–∫–∏</b>:',
                            reply_markup=key, parse_mode="HTML")
                        await states.setup_get.set()
                        await state.update_data(nm=nm, message_id=msg.message.message_id, chat_id=msg.message.chat.id)
    await msg.answer()
    await DB_user(msg.from_user.id, msg.data)


@dp.message_handler(state=states.setup_get)
async def edit_callback(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    await DB_user(user_id, message.text)
    a = await state.get_data()
    msg_id = a.get('message_id')
    chat_id = a.get("chat_id")
    a = a.get("nm")
    text = message.text
    if "%" in text:
        pass
    else:
        try:
            int(text)
        except:
            await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")
            return
    try:
        headers = {
            'Authorization': await DB_get_key(user_id),
        }
        async with aiohttp.ClientSession() as session:
            response = await Get_Info(headers, session)
            if response[0] == 200:
                for inf in response[1]:
                    if int(inf.get("nmId")) == int(a):
                        nm_sale = inf.get("discount")
                        sales = text
                        break
            elif response[0] == 401:
                await message.answer("Api –∫–ª—é—á –Ω–µ –≤–µ—Ä–µ–Ω!")
            elif response[0] == 500:
                await message.answer("–ü—Ä–æ—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É –Ω–∞ —Å–≤–æ–µ–π —Å—Ç–æ—Ä–æ–Ω–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ...")
        cost = int(text) - (float(nm_sale) / 100 * int(text))
        cost = str(int(cost))
        await message.delete()
        button_api = InlineKeyboardButton(text='–î–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å', callback_data='Setup_yes')
        button_balance = InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data=f'setup_{a}')
        key = InlineKeyboardMarkup().add(button_api, button_balance)
        msg_id = await bot.edit_message_text(
            text=f"–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∫—É —Ü–µ–Ω—ã <b>{text}‚ÇΩ</b> (<b>{cost}‚ÇΩ –ø–æ—Å–ª–µ —Ç–µ–∫—É—â–µ–π —Å–∫–∏–¥–∫–∏ {nm_sale}%</b>) –Ω–∞ –∞—Ä—Ç–∏–∫—É–ª <code>{a}</code>??",
            message_id=msg_id,
            chat_id=chat_id, parse_mode="HTML", reply_markup=key)
        await state.update_data(nm=a, cost=text, sale=cost, sales=nm_sale)
        await states.setup_accept.set()
    except Exception as e:
        print(e)


@dp.callback_query_handler(Text(startswith="Setup_yes"), state="*")
async def edit_yes_callback(msg: types.CallbackQuery, state: FSMContext):
    user_id = msg.from_user.id
    a = await state.get_data()
    await state.finish()
    if a != {}:
        sale = a.get("sale")
        nm = a.get("nm")
        cost = a.get("cost")
        sales = a.get("sales")
        headers = {
            'Authorization': await DB_get_key(user_id),
        }
        async with aiohttp.ClientSession() as session:
            response = await Get_Info(headers, session)
            if response[0] == 200:
                payload = [{
                    "nmId": int(nm),
                    "price": int(cost)
                }]
                responses = await Set_Price(headers, session, payload)
                if int(responses[0]) == 200:
                    await msg.message.edit_text(
                        f"üü¢ –¶–µ–Ω–∞ <b>{cost}‚ÇΩ</b> (<b>{sale}‚ÇΩ –ø–æ—Å–ª–µ —Ç–µ–∫—É—â–µ–π —Å–∫–∏–¥–∫–∏ {sales}</b>) —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ –∞—Ä—Ç–∏–∫—É–ª <code>{nm}</code>",
                        reply_markup=None, parse_mode="HTML")
                elif int(responses[0]) == 400:
                    backs = InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data=f"setup_{nm}")
                    key = InlineKeyboardMarkup().add(backs)
                    error = responses[1].get("errors")[0].replace(";", '.\n    ')
                    passed = 1
                    temps = []
                    for temp in error.split():
                        if passed == 1:
                            passed = 0
                            temp = "\n" + temp.title()
                        if "." in temp:
                            passed = 1
                        temps.append(temp)
                    await msg.message.edit_text(f"üî¥ WB –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É:\n    {' '.join(temps)}", reply_markup=key)
            elif response[0] == 401:
                await msg.message.edit_text("Api –∫–ª—é—á –Ω–µ –≤–µ—Ä–µ–Ω!")
            elif response[0] == 500:
                await msg.message.edit_text("–ü—Ä–æ—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É –Ω–∞ —Å–≤–æ–µ–π —Å—Ç–æ—Ä–æ–Ω–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ...")
    else:
        await msg.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    await msg.answer()
    await DB_user(msg.from_user.id, msg.data)


@dp.callback_query_handler(Text(startswith="Setup_menu"), state="*")
async def Get_articles(msg: types.CallbackQuery, state: FSMContext):
    user_id = msg.from_user.id
    await state.finish()
    passed = await DB_Get_Passed(user_id)
    if passed is True:
        answer = await DB_get_key(user_id)
        if answer is not None:
            headers = {
                'Authorization': answer,
            }
            async with aiohttp.ClientSession() as session:
                response = await Get_Info(headers, session)
                if response[0] == 200:
                    answer = response[1]
                    nmids = []
                    nms = []
                    for info in answer:
                        nm = info.get("nmId")
                        price = info.get("price")
                        discount = info.get("discount")
                        promoCode = info.get("promoCode")
                        nms.append(nm)
                    '''await message.answer(
                        f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–µ –∞—Ä—Ç–∏–∫–ª—ã.\n\n{''.join(nmids)}\n\n–í—ã–±–µ—Ä–∏ –∞—Ä—Ç–∏–∫–ª—ã –∏ –ø—Ä–∏—à–ª–∏ –º–Ω–µ –∫–æ–º–∞–Ω–¥—É '`/select_articles` –ù–æ–º–µ—Ä–∞ –∞—Ä—Ç–∏–∫–ª–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é\n\n–ü—Ä–∏–º–µ—Ä `/select_articles {nm}, 1234567`'",
                        parse_mode="Markdown")
                    '''
                    loop = 0
                    loop1 = 1
                    inline_kb1 = InlineKeyboardMarkup()
                    inline_kb1.row_width = 2
                    for nm in nms:
                        l = len(nms) - 1
                        if l != loop:
                            if loop >= 6:
                                if loop1 == 1:
                                    next = InlineKeyboardButton(f"‚û°Ô∏è", callback_data=f'Setup_Next_{nm}')
                                    inline_btn_1 = InlineKeyboardButton(f"{nm}", callback_data=f'setup_{nm}')
                                    inline_kb1 = inline_kb1.add(inline_btn_1, next)
                                elif loop1 == 2:
                                    next = InlineKeyboardButton(f"‚û°Ô∏è", callback_data=f'Setup_Next_{nm}')
                                    inline_btn_2 = InlineKeyboardButton(f"{nm}", callback_data=f'setup_{nm}')
                                    inline_kb1 = inline_kb1.add(inline_btn_1, inline_btn_2, next)
                                break
                            if loop1 == 1:
                                inline_btn_1 = InlineKeyboardButton(f"{nm}", callback_data=f'setup_{nm}')
                            elif loop1 == 2:
                                inline_btn_2 = InlineKeyboardButton(f"{nm}", callback_data=f'setup_{nm}')
                                inline_kb1 = inline_kb1.add(inline_btn_1, inline_btn_2)
                                loop1 = 0
                                # last = InlineKeyboardButton(f"–ü—Ä–µ–≤–µ–¥. —Å—Ç—Ä–∞–Ω–∏—Ü–∞", callback_data=f'last_{nm}')
                            loop1 = loop1 + 1
                            loop = loop + 1
                        else:
                            if loop1 == 1:
                                inline_btn_1 = InlineKeyboardButton(f"{nm}", callback_data=f'setup_{nm}')
                                inline_kb1 = inline_kb1.add(inline_btn_1)
                            if loop1 == 2:
                                inline_btn_2 = InlineKeyboardButton(f"{nm}", callback_data=f'setup_{nm}')
                                inline_kb1 = inline_kb1.add(inline_btn_1, inline_btn_2)
                    inline_kb1.add(InlineKeyboardButton(f"–ù–∞–∑–∞–¥",
                                                        callback_data=f'Set_Standart_Sale'))
                    await msg.message.edit_text(
                        "–í—ã–±–µ—Ä–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–≤—É—é —Ü–µ–Ω—É",
                        reply_markup=inline_kb1)
                elif response[0] == 401:
                    await msg.message.edit_text(
                        "–í–∞—à –∫–ª—é—á –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–ª—É—á–∏—Ç–µ –Ω–æ–≤—ã–π api –∫–ª—é—á –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ")
                elif response[0] == 500:
                    await msg.message.edit_text("–ü—Ä–æ—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É –Ω–∞ —Å–≤–æ–µ–π —Å—Ç–æ—Ä–æ–Ω–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ...")
        else:
            button_api = InlineKeyboardButton(text='‚ûï –î–æ–±–∞–≤–∏—Ç—å API', callback_data='api_add')
            button_balance = InlineKeyboardButton(text='üí∞ –ë–∞–ª–∞–Ω—Å', callback_data='balance')
            button_support = InlineKeyboardButton(text='üë®üèª\u200düíª –ü–æ–¥–¥–µ—Ä–∂–∫–∞', url="https://t.me/roboticselleradmin")
            LK = InlineKeyboardMarkup(row_width=2).add(button_api, button_balance, button_support)
            await msg.message.edit_text("–£ –≤–∞—Å –Ω–µ —É–∫–∞–∑–∞–Ω API –∫–ª—é—á!", reply_markup=LK)
    else:
        await msg.message.answer("–ü—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞")
        await msg.message.delete()
    await DB_user(user_id, msg.data)


@dp.callback_query_handler(Text(startswith="Set_Standart_Sale"), state="*")
async def edit_callback(msg: types.CallbackQuery, state: FSMContext):
    user_id = msg.from_user.id
    Edit_menu = InlineKeyboardButton(text="–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∫–∏–¥–∫–∏", callback_data=f'Edit_menu')
    Set_price = InlineKeyboardButton(text='–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ü–µ–Ω—ã', callback_data='Setup_menu')
    LK = InlineKeyboardMarkup(row_width=2).add(Edit_menu, Set_price)
    await msg.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–º–µ–Ω—è—Ç—å", reply_markup=LK)


# ____________________________________________________________________


@dp.message_handler(state=states.set_api)
async def write_API(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    passed = await DB_Get_Passed(user_id)
    if passed is True:
        user_id = message.from_user.id
        if len(message.text) >= 120:
            await bot.send_message(admin,
                                   f"–Æ–∑–µ—Ä @{message.from_user.username}({message.from_user.id}): –ó–∞–ø—Ä–æ—Å–∏–ª –ø—Ä–æ–≤–µ—Ä–∫—É —Å–≤–æ–µ–≥–æ –∫–ª—é—á–∞.")
            msg = await message.answer("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–∞....")
            headers = {
                'Authorization': message.text,
            }
            await state.finish()
            async with aiohttp.ClientSession() as session:
                response = await Get_Info(headers, session)
            if response[0] == 200:
                answer = await DB_key(user_id, message.text)
                await msg.edit_text("‚úÖ API-–∫–ª—é—á —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω")
                await message.answer("–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–æ–π ¬´–ú–µ–Ω—é¬ª –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–∫–∏–¥–∫–∏ –Ω–∞ —Ç–æ–≤–∞—Ä—ã", reply_markup=None)
            elif response[0] == 401:
                await msg.edit_text("Api –∫–ª—é—á –Ω–µ –≤–µ—Ä–µ–Ω!")
            elif response[0] == 500:
                await msg.edit_text("–ü—Ä–æ—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É –Ω–∞ —Å–≤–æ–µ–π —Å—Ç–æ—Ä–æ–Ω–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ...")
        else:
            url = "https://seller.wildberries.ru/supplier-settings/access-to-new-api"
            keyboard = InlineKeyboardMarkup()
            button = InlineKeyboardButton('–°—Å—ã–ª–∫–∞', url=url)
            keyboard.add(button)
            await message.answer(
                "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–ª—é—á–∞.\n–ü–æ–ª—É—á–∏—Ç—å API –∫–ª—é—á –º–æ–∂–Ω–æ –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ –¥–ª—è –µ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è üîΩ",
                reply_markup=keyboard)
    else:
        await message.delete()
        await message.answer("–ü—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞")
    await DB_user(user_id, message.text)


@dp.message_handler(state=states.edit_sale)
async def edit_callback(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    await DB_user(user_id, message.text)
    a = await state.get_data()
    msg_id = a.get('message_id')
    chat_id = a.get("chat_id")
    a = a.get("nm")
    text = message.text
    if "%" in text:
        pass
    else:
        try:
            int(text)
        except:
            await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")
            return
    try:
        headers = {
            'Authorization': await DB_get_key(user_id),
        }
        async with aiohttp.ClientSession() as session:
            response = await Get_Info(headers, session)
            if response[0] == 200:
                for inf in response[1]:
                    if int(inf.get("nmId")) == int(a):
                        nm_sale = inf.get("price")
                        if "%" in text:
                            sales = text.replace("%", "")
                        else:
                            sales = text
                        if int(nm_sale) >= int(sales):
                            pass
                        else:
                            await message.answer(
                                "–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—á–µ–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤—ã—à–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ç–æ–≤–∞—Ä–∞. –ß—Ç–æ–±—ã –ø–æ–º–µ–Ω—è—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å —Å–∞–π—Ç–æ–º WB.")
                            return
                        break
            elif response[0] == 401:
                await message.answer("Api –∫–ª—é—á –Ω–µ –≤–µ—Ä–µ–Ω!")
            elif response[0] == 500:
                await message.answer("–ü—Ä–æ—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É –Ω–∞ —Å–≤–æ–µ–π —Å—Ç–æ—Ä–æ–Ω–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ...")
        if "%" in text:
            sale = text.replace("%", "")
        else:
            p = 100 / (nm_sale / int(text))
            sale = round(100 - p)
        cost = nm_sale - (float(sale) / 100 * nm_sale)
        cost = str(int(cost))
        await message.delete()
        button_api = InlineKeyboardButton(text='–î–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å', callback_data='edit_yes')
        button_balance = InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data=f'edit_{a}')
        key = InlineKeyboardMarkup().add(button_api, button_balance)
        msg_id = await bot.edit_message_text(
            text=f"–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∫—É —Å–∫–∏–¥–∫–∏ <b>{sale}%</b> (<b>{cost}‚ÇΩ</b>) –Ω–∞ –∞—Ä—Ç–∏–∫—É–ª {a}?", message_id=msg_id,
            chat_id=chat_id, parse_mode="HTML", reply_markup=key)
        await state.update_data(nm=a, sale=sale, cost=cost)
        await states.sale_accept.set()
    except Exception as e:
        print(e)


@dp.callback_query_handler(Text(startswith="Edit_menu"), state="*")
async def Get_articles(msg: types.CallbackQuery, state: FSMContext):
    user_id = msg.from_user.id
    await state.finish()
    passed = await DB_Get_Passed(user_id)
    if passed is True:
        answer = await DB_get_key(user_id)
        if answer is not None:
            headers = {
                'Authorization': answer,
            }
            async with aiohttp.ClientSession() as session:
                response = await Get_Info(headers, session)
                if response[0] == 200:
                    answer = response[1]
                    nmids = []
                    nms = []
                    for info in answer:
                        nm = info.get("nmId")
                        price = info.get("price")
                        discount = info.get("discount")
                        promoCode = info.get("promoCode")
                        nms.append(nm)
                    '''await message.answer(
                        f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–µ –∞—Ä—Ç–∏–∫–ª—ã.\n\n{''.join(nmids)}\n\n–í—ã–±–µ—Ä–∏ –∞—Ä—Ç–∏–∫–ª—ã –∏ –ø—Ä–∏—à–ª–∏ –º–Ω–µ –∫–æ–º–∞–Ω–¥—É '`/select_articles` –ù–æ–º–µ—Ä–∞ –∞—Ä—Ç–∏–∫–ª–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é\n\n–ü—Ä–∏–º–µ—Ä `/select_articles {nm}, 1234567`'",
                        parse_mode="Markdown")
                    '''
                    loop = 0
                    loop1 = 1
                    inline_kb1 = InlineKeyboardMarkup()
                    inline_kb1.row_width = 2
                    for nm in nms:
                        l = len(nms) - 1
                        if l != loop:
                            if loop >= 6:
                                if loop1 == 1:
                                    next = InlineKeyboardButton(f"‚û°Ô∏è", callback_data=f'Edit_Next_{nm}')
                                    inline_btn_1 = InlineKeyboardButton(f"{nm}", callback_data=f'edit_{nm}')
                                    inline_kb1 = inline_kb1.add(inline_btn_1, next)
                                elif loop1 == 2:
                                    next = InlineKeyboardButton(f"‚û°Ô∏è", callback_data=f'Edit_Next_{nm}')
                                    inline_btn_2 = InlineKeyboardButton(f"{nm}", callback_data=f'edit_{nm}')
                                    inline_kb1 = inline_kb1.add(inline_btn_1, inline_btn_2, next)
                                break
                            if loop1 == 1:
                                inline_btn_1 = InlineKeyboardButton(f"{nm}", callback_data=f'edit_{nm}')
                            elif loop1 == 2:
                                inline_btn_2 = InlineKeyboardButton(f"{nm}", callback_data=f'edit_{nm}')
                                inline_kb1 = inline_kb1.add(inline_btn_1, inline_btn_2)
                                loop1 = 0
                                # last = InlineKeyboardButton(f"–ü—Ä–µ–≤–µ–¥. —Å—Ç—Ä–∞–Ω–∏—Ü–∞", callback_data=f'last_{nm}')
                            loop1 = loop1 + 1
                            loop = loop + 1
                        else:
                            if loop1 == 1:
                                inline_btn_1 = InlineKeyboardButton(f"{nm}", callback_data=f'edit_{nm}')
                                inline_kb1 = inline_kb1.add(inline_btn_1)
                            if loop1 == 2:
                                inline_btn_2 = InlineKeyboardButton(f"{nm}", callback_data=f'edit_{nm}')
                                inline_kb1 = inline_kb1.add(inline_btn_1, inline_btn_2)
                    inline_kb1.add(InlineKeyboardButton(f"üîÅ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —Å–∫–∏–¥–æ–∫",
                                                        callback_data=f'Set_Standart_Sale'))
                    await msg.message.edit_text(
                        "–í—ã–±–µ—Ä–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–≤—É—é —Å–∫–∏–¥–∫—É",
                        reply_markup=inline_kb1)
                elif response[0] == 401:
                    await msg.message.edit_text(
                        "–í–∞—à –∫–ª—é—á –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–ª—É—á–∏—Ç–µ –Ω–æ–≤—ã–π api –∫–ª—é—á –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ")
                elif response[0] == 500:
                    await msg.message.edit_text("–ü—Ä–æ—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É –Ω–∞ —Å–≤–æ–µ–π —Å—Ç–æ—Ä–æ–Ω–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ...")
        else:
            button_api = InlineKeyboardButton(text='‚ûï –î–æ–±–∞–≤–∏—Ç—å API', callback_data='api_add')
            button_balance = InlineKeyboardButton(text='üí∞ –ë–∞–ª–∞–Ω—Å', callback_data='balance')
            button_support = InlineKeyboardButton(text='üë®üèª\u200düíª –ü–æ–¥–¥–µ—Ä–∂–∫–∞', url="https://t.me/roboticselleradmin")
            LK = InlineKeyboardMarkup(row_width=2).add(button_api, button_balance, button_support)
            await msg.message.edit_text("–£ –≤–∞—Å –Ω–µ —É–∫–∞–∑–∞–Ω API –∫–ª—é—á!", reply_markup=LK)
    else:
        await msg.message.answer("–ü—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞")
        await msg.message.delete()
    await DB_user(user_id, msg.data)


@dp.message_handler(commands="select_articles")
async def Select_articles(message: types.Message, state: FSMContext):
    await state.finish()
    user_id = message.from_user.id
    passed = await DB_Get_Passed(user_id)
    if passed is True:
        key = message.get_args().split(",")
        answer = await DB_get_key(user_id)
        if answer is not None:
            headers = {
                'Authorization': answer,
            }
            async with aiohttp.ClientSession() as session:
                response = await Get_Info(headers, session)
                if response[0] == 200:
                    answer = response[1]
                    nmids = []
                    error = []
                    nms = []
                    keys = []
                    nm_write = []
                    key1 = []
                    error.append("–¢–∞–∫–æ–≥–æ –∞—Ä—Ç–∏–∫–ª–∞ —É –≤–∞—Å –Ω–µ—Ç, –æ–Ω –Ω–µ –±—ã–ª –∑–∞–ø–∏—Å–∞–Ω –≤ –ë–î: ")
                    for info in answer:
                        nm = info.get("nmId")
                        discount = info.get("discount")
                        nmids.append(nm)
                        if int(discount) > 5:
                            discountsale = discount - 29
                            if int(discountsale) < 5:
                                discountsale = 5
                        else:
                            discountsale = 5
                        for nm1 in key:
                            nm1 = nm1.strip()
                            if str(nm1) == str(nm):
                                keys.append({
                                    "discount": discountsale,
                                    "nm": nm1
                                })
                                key1.append({
                                    "discount": discount,
                                    "nm": nm1
                                })
                                nm_write.append(f'{nm1}\n')
                                nms.append(f"{nm1},")
                    await DB_nmid_set_key(user_id, keys, key1, "".join(nms))
                    await message.answer(f"–Ø –∑–∞–ø–∏—Å–∞–ª –≤–æ—Ç —ç—Ç–∏ –∞—Ä—Ç–∏–∫–ª—ã:\n{''.join(nm_write)}")
                elif response[0] == 401:
                    await message.answer(
                        f"–í–∞—à –∫–ª—é—á –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–ª—É—á–∏—Ç–µ –Ω–æ–≤—ã–π api –∫–ª—é—á –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ. –í–∞—à –∫–ª—é—á –±—ã–ª —É–¥–∞–ª–µ–Ω –∏–∑ –ë–î, –µ—Å–ª–∏ –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ —á—Ç–æ —ç—Ç–æ –æ—à–∏–±–∫–∞ —Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –¢–µ—Ö –∞–¥–º–∏–Ω—É @{admin_name}")
                    await DB_key(user_id, None)
                    await bot.send_message(admin,
                                           f"–£ —é–∑–µ—Ä–∞ @{message.from_user.username}({user_id}): –ë—ã–ª —Å–±—Ä–æ—à–µ–Ω –∫–ª—é—á ```{answer}```")
                elif response[0] == 500:
                    await message.answer("–ü—Ä–æ—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É –Ω–∞ —Å–≤–æ–µ–π —Å—Ç–æ—Ä–æ–Ω–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ...")
        else:
            await message.answer(
                "–£ –≤–∞—Å –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω api –∫–ª—é—á!\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /key api –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /key –¥–ª—è –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")
    else:
        await message.delete()
        await message.answer("–ü—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞")
    await DB_user(user_id, message.text)


@dp.message_handler(commands="set_5", state='*')
async def Setup_5(message: types.Message, state: FSMContext):
    await state.finish()
    user_id = message.from_user.id
    if str(user_id) == str(admin1):
        await Set_5()
    await DB_user(user_id, message.text)


@dp.message_handler(commands="Set_Standart")
async def Setup_Standart(message: types.Message):
    user_id = message.from_user.id
    if str(user_id) == str(admin1):
        await Set_Standart()
    await DB_user(user_id, message.text)


@dp.message_handler(Text(equals="–ù–∞–∑–∞–¥"), state="*")
async def admin_Back(msg: types.Message, state: FSMContext):
    button_api = InlineKeyboardButton(text='‚ûï –î–æ–±–∞–≤–∏—Ç—å API', callback_data='api_add')
    button_balance = InlineKeyboardButton(text='üí∞ –ë–∞–ª–∞–Ω—Å', callback_data='balance')
    button_support = InlineKeyboardButton(text='üë®üèª\u200düíª –ü–æ–¥–¥–µ—Ä–∂–∫–∞', url="https://t.me/roboticselleradmin")
    LK = InlineKeyboardMarkup(row_width=2).add(button_api, button_balance, button_support)
    await msg.answer("–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", reply_markup=LK)
    user_id = msg.from_user.id
    last_message = msg.text
    await DB_user(user_id, last_message)
    await state.finish()


@dp.message_handler(commands="set_money")
async def set_mone(admin_msg: types.Message):
    if str(admin_msg.from_user.id) == str(admin1):
        data = admin_msg.get_args()
        user_id = data.split()[0]
        money = data.split()[1]
        await set_money(int(user_id), int(money))
        await admin_msg.answer(f"–£—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏–ª {user_id} {money}–†")
    await DB_user(admin_msg.from_user.id, admin_msg.text)


@dp.message_handler(commands="sendall")
async def sendall(admin_msg: types.Message):
    if str(admin_msg.from_user.id) == str(admin1):
        try:
            data = admin_msg.get_args()
            notf = data.split()[0]
            if notf == "1":
                notf = False
                data = data.split(maxsplit=1)[1]
                await MassSend(f'{"".join(data)}', notf)
            elif notf == "0":
                notf = True
                data = data.split(maxsplit=1)[1]
                await MassSend(f'{"".join(data)}', notf)
            else:
                await admin_msg.answer("–£–∫–∞–∂–∏ notf")
        except Exception as e:
            await admin_msg.answer(f'Error: {e}')
    else:
        user_id = admin_msg.from_user.id
        last_message = admin_msg.text
        await DB_user(user_id, last_message)


@dp.message_handler(commands="subs")
async def subs(admin_msg: types.Message):
    if str(admin_msg.from_user.id) == str(admin1):
        try:
            async with aiosqlite.connect(r"BalanceUser.db") as db:
                cursor = await db.cursor()
                await cursor.execute('SELECT * FROM user_info')
                a = await cursor.fetchall()
                await cursor.execute('SELECT * FROM user_balance')
                a1 = await cursor.fetchall()
                loop = 0
                for user_ids in a:
                    sub = user_ids[3]
                    sub_date = user_ids[4]
                    user_id = user_ids[0]
                    if str(sub) == str(1):
                        loop = loop + 1
                        a = await bot.get_chat(user_id)
                        await admin_msg.answer(
                            f"@{a.username} ({user_id}) –ü–æ–¥–ø–∏—Å–∫–∞ –¥–æ {datetime.datetime.fromtimestamp(int(sub_date)).strftime('%d.%m.%Y %H:%M')}")
                money = 0
                for user_ids in a1:
                    money = money + int(user_ids[1])
                await admin_msg.answer(f"–í—Å–µ–≥–æ {loop} —á–µ–ª–æ–≤–µ–∫. –ù–∞ –≤—Å–µ—Ö –±–∞–ª–∞–Ω—Å–∞—Ö {money} —Ä.")
        except Exception as e:
            await admin_msg.answer(f'Error: {e}')
    else:
        user_id = admin_msg.from_user.id
        last_message = admin_msg.text
        await DB_user(user_id, last_message)


@dp.message_handler(commands="sendsubs")
async def sendsubs(admin_msg: types.Message):
    if str(admin_msg.from_user.id) == str(admin1):
        try:
            data = admin_msg.get_args()
            notf = data.split()[0]
            if notf == "1":
                notf = True
                data = data.split(maxsplit=1)[1]
                await MassSendSubs(f'{"".join(data)}', notf)
            elif notf == "0":
                notf = False
                data = data.split(maxsplit=1)[1]
                await MassSendSubs(f'{"".join(data)}', notf)
            else:
                await admin_msg.answer("–£–∫–∞–∂–∏ notf")
        except Exception as e:
            await admin_msg.answer(f'Error: {e}')
    else:
        user_id = admin_msg.from_user.id
        last_message = admin_msg.text
        await DB_user(user_id, last_message)


@dp.message_handler(commands="count")
async def count(admin_msg: types.Message):
    if str(admin_msg.from_user.id) == str(admin1):
        async with aiosqlite.connect("Users.db") as db:
            async with db.execute("SELECT * FROM User") as cursor:
                allinfo = await cursor.fetchall()
        await admin_msg.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:  {len(allinfo)}")
        await check_sub()
    else:
        user_id = admin_msg.from_user.id
        last_message = admin_msg.text
        await DB_user(user_id, last_message)


@dp.message_handler(commands="send")
async def admin_send(admin_msg: types.Message):
    if int(admin_msg.from_user.id) == int(admin1):
        try:
            data = admin_msg.get_args()
            user_id = data.split()[0]
            text = data.split(maxsplit=1)[1]
            await bot.send_message(user_id, f'{text}')
            a = await dp.bot.get_chat(user_id)
            await admin_msg.answer(f'Send msg: {a.username}({user_id}), text: {text}.')
        except Exception as ex:
            await admin_msg.answer(f'Send msg ERROR: {ex}')
    else:
        user_id = admin_msg.from_user.id
        last_message = admin_msg.text
        await DB_user(user_id, last_message)
        await set_default_commands()


@dp.message_handler(state="*", content_types=types.ContentType.all())
async def inecorect(message: types.__all__):
    messages = message.html_text
    a = []
    a.append(messages)
    await bot.send_message(admin, text=str(a))


async def Update_Discount(headers, session, user_id):
    try:
        response = await Get_Info(headers, session)
        if response[0] == 200:
            answer = await DB_nmid(user_id)
            nm_id = []
            answer_id = answer[2].split(",")
            for a in answer_id:
                if a != "":
                    nm_id.append(a)
            keys = []
            key1 = []
            for r in response[1]:
                nm = r.get("nmId")
                discount = r.get("discount")
                if int(discount) > 5:
                    discountsale = discount - 29
                    if int(discountsale) < 5:
                        discountsale = 5
                else:
                    discountsale = 5
                for n in nm_id:
                    if str(nm) == str(n):
                        keys.append({
                            "discount": discountsale,
                            "nm": nm
                        })
                        key1.append({
                            "discount": discount,
                            "nm": nm
                        })
            await DB_nmid_set_key(user_id, keys, key1, None)
        elif response[0] == 401:
            await bot.send_message(user_id, "–í–∞—à –∫–ª—é—á –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–ª—É—á–∏—Ç–µ –Ω–æ–≤—ã–π api –∫–ª—é—á –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ")
        elif response[0] == 500:
            await bot.send_message(user_id, "–ü—Ä–æ—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É –Ω–∞ —Å–≤–æ–µ–π —Å—Ç–æ—Ä–æ–Ω–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ...")
    except Exception as e:
        await bot.send_message(admin, '')


async def Post_Discount(payload, headers, session, user_id, nm):
    try:
        async with session.post('https://suppliers-api.wildberries.ru/public/api/v1/updateDiscounts', headers=headers,
                                json=payload) as response:
            try:
                if response.status == 200:
                    try:
                        answer = await response.json(content_type=None)
                    except Exception as e:
                        print(e)
                        answer = ' '
                        await bot.send_message(admin, f"{user_id}({e})")
                    try:
                        alreadyExists = answer.get('alreadyExists')
                        if alreadyExists is None:
                            await bot.send_message(user_id,
                                                   f"üü¢ –°–∫–∏–¥–∫–∞ –Ω–∞ -30% —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ –∞—Ä—Ç–∏–∫—É–ª—ã:\n    {nm}",
                                                   disable_notification=True)
                            await bot.send_message(admin,
                                                   f"{user_id}({answer}): –ë—ã–ª–æ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ -30%")
                        else:
                            await bot.send_message(admin, f"{user_id}({answer}): —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
                    except Exception as e:
                        await bot.send_message(admin, f"{user_id}({e})")
                elif response.status == 400:
                    answer = await response.json(content_type=None)
                    await bot.send_message(admin, f"{user_id}: {answer}")
                elif response.status == 401:
                    await bot.send_message(admin, f"{user_id}: –ù–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π Api_key!")
                    await bot.send_message(user_id,
                                           f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç–∞–≤–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –≤–∞—à–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ -30%, –ø—Ä–∏—á–∏–Ω–∞:\n     –£ –≤–∞—Å –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π Api –∫–ª—é—á, –æ–Ω –±—ã–ª —Å–±—Ä–æ—à–µ–Ω! –£—Å—Ç–æ–Ω–æ–≤–∏—Ç–µ –Ω–æ–≤—ã–π –∫–ª—é—á –∫–æ–º–∞–Ω–¥–æ–π /key")
                elif response.status == 500:
                    await bot.send_message(admin, f"{user_id}: –û—à–∏–±–∫–∞ Wilberis API, –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø–æ–∑–∂–µ!")
                    await bot.send_message(user_id,
                                           f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç–∞–≤–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –≤–∞—à–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ -30%, –ø—Ä–∏—á–∏–Ω–∞:\n    –û—à–∏–±–∫–∞ Wilberis API! –ü—Ä–µ–¥—É–ø—Ä–µ–¥–∏–ª –¢–µ—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            except aiogram.utils.exceptions.RetryAfter as e:
                await asyncio.sleep(e.timeout)
    except Exception as e:
        print(e, 'Post_Discount')


async def Post_Discount_standart(payload, headers, session, user_id, nm):
    try:
        async with session.post('https://suppliers-api.wildberries.ru/public/api/v1/updateDiscounts', headers=headers,
                                json=payload) as response:
            if response.status == 200:
                try:
                    answer = await response.json(content_type=None)
                except Exception as e:
                    print(e)
                    answer = ' '
                    await bot.send_message(admin, f"{user_id}: {e}")
                try:
                    alreadyExists = answer.get('alreadyExists')
                    if alreadyExists is None:
                        await bot.send_message(user_id,
                                               f"üü¢ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –Ω–∞ –∞—Ä—Ç–∏–∫—É–ª—ã:\n    {nm}",
                                               disable_notification=True)
                        await bot.send_message(admin,
                                               f"{user_id}({answer}): –ë—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤!")
                    else:
                        await bot.send_message(admin, f"{user_id}({answer}): —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
                except Exception as e:
                    await bot.send_message(admin, f"{user_id}: {e}")
            elif response.status == 400:
                answer = await response.json(content_type=None)
                await bot.send_message(admin, f"{user_id}: {answer}")
            elif response.status == 401:
                await bot.send_message(admin, f"{user_id}: –ù–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π Api_key!")
                await bot.send_message(user_id,
                                       f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç–∞–≤–∏—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤–∞—à–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤, –ø—Ä–∏—á–∏–Ω–∞:\n     –£ –≤–∞—Å –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π Api –∫–ª—é—á, –æ–Ω –±—ã–ª —Å–±—Ä–æ—à–µ–Ω! –£—Å—Ç–æ–Ω–æ–≤–∏—Ç–µ –Ω–æ–≤—ã–π –∫–ª—é—á –∫–æ–º–∞–Ω–¥–æ–π /key")
            elif response.status == 500:
                await bot.send_message(admin, f"{user_id}: –û—à–∏–±–∫–∞ Wilberis API, –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø–æ–∑–∂–µ!")
                await bot.send_message(user_id,
                                       f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç–∞–≤–∏—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤–∞—à–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤, –ø—Ä–∏—á–∏–Ω–∞:\n    –û—à–∏–±–∫–∞ Wilberis API! –ü—Ä–µ–¥—É–ø—Ä–µ–¥–∏–ª –¢–µ—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            else:
                await bot.send_message(admin, f"{user_id}: {response.status}")
    except Exception as e:
        print(e, 'Post_Discount_standart')
        await bot.send_message(admin, f"ERROR_Standart_1({user_id}):  {e}")


async def Get_Info(headers, session):
    async with session.get('https://suppliers-api.wildberries.ru/public/api/v1/info', headers=headers) as response:
        if response.status != 401:
            answer = await response.json(content_type="text/plain")
            return response.status, answer
        else:
            return response.status, "1"


async def Set_Sale(headers, session, payload):
    async with session.post('https://suppliers-api.wildberries.ru/public/api/v1/updateDiscounts', headers=headers,
                            json=payload) as response:
        if response.status != 401:
            answer = await response.json(content_type="text/plain")
            return response.status, answer
        else:
            return response.status, "1"


async def Set_Price(headers, session, payload):
    async with session.post('https://suppliers-api.wildberries.ru/public/api/v1/prices', headers=headers,
                            json=payload) as response:
        if response.status != 401:
            answer = await response.json(content_type="text/plain")
            return response.status, answer
        else:
            return response.status, "1"


async def Set_5():
    try:
        async with aiosqlite.connect("Users.db") as db:
            async with db.execute("SELECT * FROM User") as cursor:
                allinfo = await cursor.fetchall()
                tasks = []
                tasks1 = []
                print("–û—Ç–∫—Ä—ã–ª —Å–µ—Å—Å–∏—é")
                session = aiohttp.ClientSession()
                await bot.send_message(admin, f"–û—Ç–∫—Ä—ã–ª —Å–µ—Å—Å–∏—é!")
                for info in allinfo:
                    user_id = info[0]
                    api_key = info[1]
                    key = info[2]
                    nm = info[6]
                    if nm is not None:
                        nm = info[6].split(",")
                        nm = "\n    ".join(nm)
                        if key is not None and api_key is not None:
                            key = eval(key)
                            headers = {
                                'Authorization': api_key,
                            }
                            try:
                                await Update_Discount(headers, session, user_id)
                                await Post_Discount(key, headers, session, user_id, nm)
                                await asyncio.sleep(0.6)
                            except Exception as e:
                                print(e)
                                await bot.send_message(admin, f"ERROR_Set_5_1: {e} {user_id}")
                    else:
                        pass
                    await asyncio.sleep(2)
    except Exception as e:
        await bot.send_message(admin, f"ERROR_Set_5: {e}")
        await session.close()
        print(e)
    finally:
        if session:
            await session.close()
            print("–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–µ—Å—Å–∏–∏")
            await bot.send_message(admin, f"–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–µ—Å—Å–∏–∏!")


async def Set_Standart():
    try:
        async with aiosqlite.connect("Users.db") as db:
            async with db.execute("SELECT * FROM User") as cursor:
                allinfo = await cursor.fetchall()
                print("–û—Ç–∫—Ä—ã–ª —Å–µ—Å—Å–∏—é")
                session = aiohttp.ClientSession()
                await bot.send_message(admin, f"–û—Ç–∫—Ä—ã–ª —Å–µ—Å—Å–∏—é!")
                for info in allinfo:
                    user_id = info[0]
                    key1 = info[3]
                    Api_key = info[1]
                    nm = info[6]
                    if nm is not None:
                        nm = info[6].split(",")
                        nm = "\n    ".join(nm)
                        if key1 is not None and Api_key is not None:
                            key1 = eval(key1)
                            headers = {
                                'Authorization': Api_key,
                            }
                            try:
                                await Post_Discount_standart(key1, headers, session, user_id, nm)
                                await asyncio.sleep(3)
                            except Exception as e:
                                print(e, user_id)
                                await bot.send_message(admin, f"ERROR_Standart_2: {e}  {user_id}")
                        else:
                            pass
                    else:
                        pass

    except Exception as e:
        await bot.send_message(admin, f"ERROR_Standart: {e}")
        print(e)
        await session.close()
    finally:
        if session:
            await session.close()
            await bot.send_message(admin, f"–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–µ—Å—Å–∏–∏!")
            print("–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–µ—Å—Å–∏–∏")


async def check_sub():
    try:
        async with aiosqlite.connect(r"BalanceUser.db") as db:
            cursor = await db.cursor()
            await cursor.execute('SELECT * FROM user_info')
            info = await cursor.fetchall()
            for inf in info:
                user_id = inf[0]
                deposits = inf[1]
                offs = inf[2]
                sub = inf[3]
                sub_date = inf[4]
                if sub != 0:
                    dt = datetime.datetime.fromtimestamp(sub_date)
                    tt = dt.timestamp()
                    now = datetime.datetime.now()
                    now = now.timestamp()
                    if tt <= now:
                        money = await get_money(user_id)
                        if money >= 99:
                            money = money - 99
                            print(user_id, money)
                            await set_money(user_id, money)
                            now = datetime.datetime.now()
                            now = now + datetime.timedelta(days=30)
                            now = now.timestamp()
                            offs = offs.split(",")
                            nows = datetime.datetime.now().strftime("%H:%M %d-%m-%Y")
                            offs.append(f"{nows} - 99‚ÇΩ \n")
                            await cursor.execute(
                                'INSERT INTO user_info (user_id, deposits, offs, sub, sub_date) VALUES (?, ?, ?, ?, ?)',
                                (user_id, deposits, ",".join(offs), 1, now))
                            await db.commit()
                            await bot.send_message(user_id,
                                                   "–ü–ª–∞—Ç–∞ 99‚ÇΩ –∑–∞ –µ–∂–µ–º–µ—Å—è—á–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É —É—Å–ø–µ—à–Ω–∞ —Å–ø–∏—Å–∞–Ω–∞ —Å –±–∞–ª–∞–Ω—Å–∞ ‚úÖ", )
                        else:
                            await cursor.execute(
                                'INSERT INTO user_info (user_id, deposits, offs, sub, sub_date) VALUES (?, ?, ?, ?, ?)',
                                (user_id, deposits, offs, 0, None))
                            await db.commit()
                            topup = InlineKeyboardButton("–°–≤–æ—è —Å—É–º–º–∞", callback_data="topup")
                            up99 = InlineKeyboardButton("+99‚ÇΩ", callback_data="up99")
                            pay = InlineKeyboardMarkup(row_width=2).add(up99, topup)
                            await bot.send_message(user_id,
                                                   "–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –∏—Å—Ç—ë–∫. –ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º –ø–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å üí≥",
                                                   reply_markup=pay)
                else:
                    money = await get_money(user_id)
                    if money is not None:
                        if money >= 99:
                            now = datetime.datetime.now()
                            now = now + datetime.timedelta(days=30)
                            now = now.timestamp()
                            offs = offs.split()
                            nows = datetime.datetime.now().strftime("%H:%M %d-%m-%Y")
                            offs.append(f"{nows} - 99‚ÇΩ \n")
                            money = money - 99
                            await set_money(user_id, money)
                            await cursor.execute(
                                'INSERT INTO user_info (user_id, deposits, offs, sub, sub_date) VALUES (?, ?, ?, ?, ?)',
                                (user_id, deposits, ",".join(offs), 1, now))
                            await db.commit()
                            await bot.send_message(user_id, "–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞. –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ ‚úÖ", )
    except Exception as e:
        print(e)
        await bot.send_message(admin, f"{e}")


async def Dump_BD():
    date = datetime.datetime.now()
    await bot.send_message(chat_id=admin, text=f"–í–∞—à –¥–∞–º–ø –ø–æ–≤–µ–ª–∏—Ç–µ–ª—å, –∑–∞ {date.strftime('%d %B, %H:%M')}")
    await bot.send_document(chat_id=admin, document=open("Users.db", "rb"))
    await bot.send_document(chat_id=admin, document=open("BalanceUser.db", "rb"))


async def scheduler():
    aioschedule.every(1).seconds.do(check_sub)
    aioschedule.every().day.at("01:00").do(Set_5)
    aioschedule.every().day.at("06:00").do(Set_Standart)
    aioschedule.every().day.at("00:00").do(Dump_BD)
    while True:
        await aioschedule.run_pending()
        await asyncio.sleep(50)


async def on_startup(_):
    a = await bot.me
    print(a)
    asyncio.create_task(scheduler())


if __name__ == '__main__':
    while True:
        try:
            executor.start_polling(dp, skip_updates=False, on_startup=on_startup)
        except Exception as e:
            time.sleep(15)
            print(e)
